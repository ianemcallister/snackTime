function confirmationController(t){}function landingController(t,e,r,n,o,i){function c(){i.getSqrAppId().then(function(t){s.model.apis.squareId=t.id})["catch"](function(t){})}var s=this;s.model=o,t.$watch("vm.model.shipping.address.zip",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.zip=t)}),t.$watch("vm.model.shipping.address.city",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.city=t)}),t.$watch("vm.model.shipping.address.state",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.state=t)}),t.$watch("vm.model.shipping.address.street1",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street1=t)}),t.$watch("vm.model.shipping.address.street2",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street2=t)}),t.$watch("vm.model.shipping.address.street3",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street3=t)}),s.copyShippingAddress=function(t){t?s.model.billing.address=s.model.shipping.address:s.model.billing.address=o.billing.address},s.submitForm=function(t){e.info("submitting",t),i.submitSale(s.model).then(function(t){e.info(t),r.path("/confirmation/?tesing=goodTest"),n.$apply()})["catch"](function(t){e.info(t)}),r.path("/processing")},c()}function processingController(t,e){}function billingInfo(){function t(t,e,r,n){}function e(t,e){var r=this;r.toggleAddressCopy=function(t){r.copyShipping()(t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/billingInfo.directive.htm",replace:!0,scope:{address:"=",payment:"=",copyShippingAddress:"=",copyShipping:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccCSV(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccCSV.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccCapture(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccCapture.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccExp(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccExp.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccName.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccNumber(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccNumber.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function city(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/city.directive.htm",replace:!0,scope:{cityName:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function contactInfo(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/contactInfo.directive.htm",replace:!0,scope:{name:"=",email:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function emailAddress(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailAddress.directive.htm",replace:!0,scope:{email:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function firstName(){function t(t,e,r,n){}function e(t,e,r){var n=this;n.state={container:{classes:r.initClasses("container"),styles:r.initStyles("container")},input:{classes:r.initClasses("input"),styles:r.initStyles("container")}},n.validate=function(t,e){}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/firstName.directive.htm",replace:!0,scope:{first:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","stateData"],r}function lastName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/lastName.directive.htm",replace:!0,scope:{last:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function productSelection(){function t(t,e,r,n){}function e(t,e){var r=this;r.calculateSubtotal=function(){r.subtotal=r.qty*r.price},r.decrement=function(){r.qty>1&&(r.qty=r.qty-1),r.calculateSubtotal()},r.increment=function(){r.qty=r.qty+1,r.calculateSubtotal()}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/productSelection.directive.htm",replace:!0,scope:{qty:"=",price:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function progressBar(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/progressBar.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function purchaseBtn(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/purchaseBtn.directive.htm",replace:!0,scope:{submitForm:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function shippingCalculator(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shippingCalculator.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function shippingInfo(){function t(t,e,r,n){}function e(t,e){var r=this;e.info(r.address)}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shippingInfo.directive.htm",replace:!0,scope:{address:"=",requirnments:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function state(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/state.directive.htm",replace:!0,scope:{stateId:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function street(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/street.directive.htm",replace:!0,scope:{streetAddress:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function toolBar(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function yourName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/yourName.directive.htm",replace:!0,scope:{name:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function zipCode(){function t(t,e,r,n){}function e(t,e,r,n){function o(t){var e=!1;return"undefined"!=typeof t&&t.length>=5&&(e=!0),e}function i(){s.state.container.classes=n.updateState("container","success"),s.state.input.classes=n.updateState("input","success")}function c(){s.state.container.classes["has-success"]=!1,s.state.container.classes["has-warning"]=!0,s.state.container.classes["has-danger"]=!1,s.state.input.classes["form-control-success"]=!1,s.state.input.classes["form-control-warning"]=!0,s.state.input.classes["form-control-danger"]=!1}var s=this;s.valStages=n.initValStages(),s.state={container:{classes:n.initClasses("container"),styles:n.initStyles("container")},input:{classes:n.initClasses("input"),styles:n.initStyles("container")}},s.validate=function(t){s.valStages.attempted&&(o(t)?i():c())},s.submit=function(t){s.valStages.attempted=!0,s.validate(t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/zipCode.directive.htm",replace:!0,scope:{uniqueId:"=",zip:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","server","stateData"],r}function dataModel(t){function e(t){}function r(t,e){}function n(t){}function o(t,e){}var i={name:{first:"",last:""},email:"",copyShippingAddress:!0,product:{price:2e3},order:{qty:1,cost:{subtotal:2e3,tax:0,discounts:{promotions:[],totalValue:0},total:0}},shipping:{address:{street1:"",street2:"",street3:"",city:"",state:"",zip:""},requirnments:{}},billing:{address:{street1:"",street2:"",street3:"",city:"",state:"",zip:""},payment:{number:["","","",""],exp:["",""],csv:""}},apis:{squareId:""},_read:e,_update:r,readProp:n,updateProp:o};return i}function stateFactory(t){var e={model:{allElementsCompleted:!1,fields:[],input:{prop:{name:"",requirnments:[]},state:{addressed:!1,success:!1,failure:!1}}},classes:{"form-group":!1,"has-success":!1,"has-warning":!1,"has-danger":!1,"form-control-label":!1,"form-control":!1,"form-control-success":!1,"form-control-warning":!1,"form-control-danger":!1,"form-control-feedback":!1,"form-text":!1,"text-muted":!1},styles:{},changeState:{inputSuccess:"",inputFailed:""}};return e}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/processing",{templateUrl:"views/processing.htm",controller:"processingController",controllerAs:"vm",resolve:{test:function(){return"awesome"}}}).when("/confirmation",{templateUrl:"views/confirmation.htm",controller:"confirmationController",controllerAs:"vm"})}function server(t,e){var r=this;r._get=function(t){return new Promise(function(r,n){e.get(t).then(function(t){r(t.data)},function(t){n(t)})})},r._post=function(r,n,o){return t.info("url",r,"data",n),new Promise(function(t,i){e.post(r,n,o).then(function(e){t(e)},function(t){i(t)})})},r.getSqrAppId=function(){return new Promise(function(t,e){r._get("/api/squareId").then(function(e){t(e)})["catch"](function(t){e(t)})})},r.cityStateLookup=function(t){var e="/api/zipcheck/"+t;return new Promise(function(t,n){r._get(e).then(function(e){t(e)})["catch"](function(t){n(t)})})},r.submitSale=function(e){t.info("submitting sale");var n={"Content-Type":"application/x-www-form-urlencoded;charset=utf-8;"};return new Promise(function(t,o){r._post("/api/order",e,n).then(function(e){t(e)})["catch"](function(t){o(t)})})}}function stateData(t){var e=this;e.valStages={attempted:!1,successful:!1,failed:!0},e.classes={container:{"has-success":!1,"has-warning":!1,"has-danger":!1},input:{"form-control-success":!1,"form-control-warning":!1,"form-control-danger":!1}},e.styles={container:{},input:{}},e.initValStages=function(){return e.valStages},e.initClasses=function(t){return e.classes[t]},e.initStyles=function(t){return e.styles[t]},e.updateState=function(t,r){var n=e.classes[t];return Object.keys(n).forEach(function(t){var e=t.split("-");e.forEach(function(e){e==r?n[t]=!0:n[t]=!1})}),n}}config.$inject=["$routeProvider"];var trumpsNuts=angular.module("trumpsNuts",["ngRoute"]);angular.module("trumpsNuts").controller("confirmationController",confirmationController),confirmationController.$inject=["$log"],angular.module("trumpsNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$location","$rootScope","dataModel","server"],angular.module("trumpsNuts").controller("processingController",processingController),processingController.$inject=["$log","test"],angular.module("trumpsNuts").directive("billingInfo",billingInfo),angular.module("trumpsNuts").directive("ccCSV",ccCSV),angular.module("trumpsNuts").directive("ccCapture",ccCapture),angular.module("trumpsNuts").directive("ccExp",ccExp),angular.module("trumpsNuts").directive("ccName",ccName),angular.module("trumpsNuts").directive("ccNumber",ccNumber),angular.module("trumpsNuts").directive("city",city),angular.module("trumpsNuts").directive("contactInfo",contactInfo),angular.module("trumpsNuts").directive("emailAddress",emailAddress),angular.module("trumpsNuts").directive("firstName",firstName),angular.module("trumpsNuts").directive("lastName",lastName),angular.module("trumpsNuts").directive("productSelection",productSelection),angular.module("trumpsNuts").directive("progressBar",progressBar),angular.module("trumpsNuts").directive("purchaseBtn",purchaseBtn),angular.module("trumpsNuts").directive("shippingCalculator",shippingCalculator),angular.module("trumpsNuts").directive("shippingInfo",shippingInfo),angular.module("trumpsNuts").directive("state",state),angular.module("trumpsNuts").directive("street",street),angular.module("trumpsNuts").directive("toolBar",toolBar),angular.module("trumpsNuts").directive("yourName",yourName),angular.module("trumpsNuts").directive("zipCode",zipCode),angular.module("trumpsNuts").factory("dataModel",dataModel),dataModel.$inject=["$log"],angular.module("trumpsNuts").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("trumpsNuts").config(config),angular.module("trumpsNuts").service("server",server),server.$inject=["$log","$http"],angular.module("trumpsNuts").service("stateData",stateData),stateData.$inject=["$log"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvY29uZmlybWF0aW9uLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xhbmRpbmcuY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvcHJvY2Vzc2luZy5jb250cm9sbGVyLmpzIiwiYnVuZGxlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2JpbGxpbmdJbmZvLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jY0NTVi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2NDYXB0dXJlLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jY0V4cC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2NOYW1lLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jY051bWJlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY2l0eS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY29udGFjdEluZm8uZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2VtYWlsQWRkcmVzcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZmlyc3ROYW1lLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sYXN0TmFtZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJvZHVjdFNlbGVjdGlvbi5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcHJvZ3Jlc3NCYXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3B1cmNoYXNlQnRuLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zaGlwcGluZ0NhbGN1bGF0b3IuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NoaXBwaW5nSW5mby5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc3RhdGUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3N0cmVldC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdG9vbGJhci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMveW91ck5hbWUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3ppcENvZGUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvZGF0YU1vZGVsLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9zdGF0ZS5mYWN0b3J5LmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGUtY29uZmlnLmpzIiwic2NyaXB0cy9zZXJ2aWNlcy9zZXJ2ZXIuc2VydmljZS5qcyIsInNjcmlwdHMvc2VydmljZXMvc3RhdGVEYXRhLnNlcnZpY2UuanMiLCJzY3JpcHRzL2FwcC5qcyJdLCJuYW1lcyI6WyJjb25maXJtYXRpb25Db250cm9sbGVyIiwiJGxvZyIsImxhbmRpbmdDb250cm9sbGVyIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiJHJvb3RTY29wZSIsImRhdGFNb2RlbCIsInNlcnZlciIsImluaXQiLCJnZXRTcXJBcHBJZCIsInRoZW4iLCJyZXNwb25zZSIsInZtIiwibW9kZWwiLCJhcGlzIiwic3F1YXJlSWQiLCJpZCIsImVyciIsInRoaXMiLCIkd2F0Y2giLCJjdXJyZW50Iiwib3JpZ2luYWwiLCJjb3B5U2hpcHBpbmdBZGRyZXNzIiwiYmlsbGluZyIsImFkZHJlc3MiLCJ6aXAiLCJjaXR5Iiwic3RhdGUiLCJzdHJlZXQxIiwic3RyZWV0MiIsInN0cmVldDMiLCJidG5TdGF0ZSIsInNoaXBwaW5nIiwic3VibWl0Rm9ybSIsInZhbHVlIiwiaW5mbyIsInN1Ym1pdFNhbGUiLCJwYXRoIiwiJGFwcGx5IiwiZXJyb3IiLCJwcm9jZXNzaW5nQ29udHJvbGxlciIsInRlc3QiLCJiaWxsaW5nSW5mbyIsImxpbmtGdW5jIiwic2NvcGUiLCJlbCIsImF0dHIiLCJjdHJsIiwiYmlsbGluZ0luZm9Db250cm9sbGVyIiwidG9nZ2xlQWRkcmVzc0NvcHkiLCJjb3B5U2hpcHBpbmciLCIkaW5qZWN0IiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsInJlcGxhY2UiLCJwYXltZW50IiwibGluayIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwiY2NDU1YiLCJjY0NTVkNvbnRyb2xsZXIiLCJjY0NhcHR1cmUiLCJjY0NhcHR1cmVDb250cm9sbGVyIiwiY2NFeHAiLCJjY0V4cENvbnRyb2xsZXIiLCJjY05hbWUiLCJjY05hbWVDb250cm9sbGVyIiwiY2NOdW1iZXIiLCJjY051bWJlckNvbnRyb2xsZXIiLCJjaXR5Q29udHJvbGxlciIsImNpdHlOYW1lIiwiY29udGFjdEluZm8iLCJjb250YWN0SW5mb0NvbnRyb2xsZXIiLCJuYW1lIiwiZW1haWwiLCJlbWFpbEFkZHJlc3MiLCJlbWFpbEFkZHJlc3NDb250cm9sbGVyIiwiZmlyc3ROYW1lIiwiZmlyc3ROYW1lQ29udHJvbGxlciIsInN0YXRlRGF0YSIsImNvbnRhaW5lciIsImNsYXNzZXMiLCJpbml0Q2xhc3NlcyIsInN0eWxlcyIsImluaXRTdHlsZXMiLCJpbnB1dCIsInZhbGlkYXRlIiwiZmllbGQiLCJmaXJzdCIsImxhc3ROYW1lIiwibGFzdE5hbWVDb250cm9sbGVyIiwibGFzdCIsInByb2R1Y3RTZWxlY3Rpb24iLCJwcm9kdWN0U2VsZWN0aW9uQ29udHJvbGxlciIsImNhbGN1bGF0ZVN1YnRvdGFsIiwic3VidG90YWwiLCJxdHkiLCJwcmljZSIsImRlY3JlbWVudCIsImluY3JlbWVudCIsInByb2dyZXNzQmFyIiwicHJvZ3Jlc3NCYXJDb250cm9sbGVyIiwicHVyY2hhc2VCdG4iLCJwdXJjaGFzZUJ0bkNvbnRyb2xsZXIiLCJzaGlwcGluZ0NhbGN1bGF0b3IiLCJzaGlwcGluZ0NhbGN1bGF0b3JDb250cm9sbGVyIiwic2hpcHBpbmdJbmZvIiwic2hpcHBpbmdJbmZvQ29udHJvbGxlciIsInJlcXVpcm5tZW50cyIsInN0YXRlQ29udHJvbGxlciIsInN0YXRlSWQiLCJzdHJlZXQiLCJzdHJlZXRDb250cm9sbGVyIiwic3RyZWV0QWRkcmVzcyIsInRvb2xCYXIiLCJUb29sQmFyQ29udHJvbGxlciIsInlvdXJOYW1lIiwieW91ck5hbWVDb250cm9sbGVyIiwiemlwQ29kZSIsInppcENvZGVDb250cm9sbGVyIiwibG9uZ0Vub3VnaCIsInppcGNvZGUiLCJmbGFnIiwibGVuZ3RoIiwic3VjY2Vzc2lmeUlucHV0IiwidXBkYXRlU3RhdGUiLCJmYWlsaWZ5SW5wdXQiLCJ2YWxTdGFnZXMiLCJpbml0VmFsU3RhZ2VzIiwiYXR0ZW1wdGVkIiwic3VibWl0IiwidW5pcXVlSWQiLCJfcmVhZCIsInByb3AiLCJfdXBkYXRlIiwicmVhZFByb3AiLCJ1cGRhdGVQcm9wIiwiZGF0YU1vZGVsT2JqZWN0IiwicHJvZHVjdCIsIm9yZGVyIiwiY29zdCIsInRheCIsImRpc2NvdW50cyIsInByb21vdGlvbnMiLCJ0b3RhbFZhbHVlIiwidG90YWwiLCJudW1iZXIiLCJleHAiLCJjc3YiLCJzdGF0ZUZhY3RvcnkiLCJzdGF0ZU9iamVjdCIsImFsbEVsZW1lbnRzQ29tcGxldGVkIiwiZmllbGRzIiwiYWRkcmVzc2VkIiwic3VjY2VzcyIsImZhaWx1cmUiLCJmb3JtLWdyb3VwIiwiaGFzLXN1Y2Nlc3MiLCJoYXMtd2FybmluZyIsImhhcy1kYW5nZXIiLCJmb3JtLWNvbnRyb2wtbGFiZWwiLCJmb3JtLWNvbnRyb2wiLCJmb3JtLWNvbnRyb2wtc3VjY2VzcyIsImZvcm0tY29udHJvbC13YXJuaW5nIiwiZm9ybS1jb250cm9sLWRhbmdlciIsImZvcm0tY29udHJvbC1mZWVkYmFjayIsImZvcm0tdGV4dCIsInRleHQtbXV0ZWQiLCJjaGFuZ2VTdGF0ZSIsImlucHV0U3VjY2VzcyIsImlucHV0RmFpbGVkIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwicmVzb2x2ZSIsIiRodHRwIiwiYmFja2VuZCIsIl9nZXQiLCJ1cmwiLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiZGF0YSIsIl9wb3N0IiwicG9zdCIsImNpdHlTdGF0ZUxvb2t1cCIsIm9yZGVyRm9ybSIsIkNvbnRlbnQtVHlwZSIsInN1Y2Nlc3NmdWwiLCJmYWlsZWQiLCJzZWN0aW9uIiwicmV0dXJuT2JqZWN0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJyZXN1bHRBcnJheSIsInNwbGl0Iiwid29yZCIsInRydW1wc051dHMiLCJhbmd1bGFyIiwibW9kdWxlIiwiZmFjdG9yeSIsInNlcnZpY2UiXSwibWFwcGluZ3MiOiJBQU9BLFFBQUFBLHdCQUFBQyxJQ0FBLFFBQUFDLG1CQUFBQyxFQUFBRixFQUFBRyxFQUFBQyxFQUFBQyxFQUFBQyxHQWdDQSxRQUFBQyxLQUdBRCxFQUFBRSxjQUFBQyxLQUFBLFNBQUFDLEdBRUFDLEVBQUFDLE1BQUFDLEtBQUFDLFNBQUFKLEVBQUFLLEtBRkFULFNBR0EsU0FBQVUsTUFuQ0EsR0FBQUwsR0FBQU0sSUFDQU4sR0FBQUMsTUFBQVAsRUFHQUgsRUFBQWdCLE9BQUEsZ0NBQUEsU0FBQUMsRUFBQUMsR0FDQVQsRUFBQUMsTUFBQVMsc0JBQUFWLEVBQUFDLE1BQUFVLFFBQUFDLFFBQUFDLElBQUFMLEtBR0FqQixFQUFBZ0IsT0FBQSxpQ0FBQSxTQUFBQyxFQUFBQyxHQUNBVCxFQUFBQyxNQUFBUyxzQkFBQVYsRUFBQUMsTUFBQVUsUUFBQUMsUUFBQUUsS0FBQU4sS0FHQWpCLEVBQUFnQixPQUFBLGtDQUFBLFNBQUFDLEVBQUFDLEdBQ0FULEVBQUFDLE1BQUFTLHNCQUFBVixFQUFBQyxNQUFBVSxRQUFBQyxRQUFBRyxNQUFBUCxLQUdBakIsRUFBQWdCLE9BQUEsb0NBQUEsU0FBQUMsRUFBQUMsR0FDQVQsRUFBQUMsTUFBQVMsc0JBQUFWLEVBQUFDLE1BQUFVLFFBQUFDLFFBQUFJLFFBQUFSLEtBR0FqQixFQUFBZ0IsT0FBQSxvQ0FBQSxTQUFBQyxFQUFBQyxHQUNBVCxFQUFBQyxNQUFB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QUFBLGNBQ0F2SixVQUFBLFVBQUFvRSxTQ1RBa0YsUUFDQUMsT0FBQSxjQUNBQyxRQUFBLFlBQUF0TSxXQUVBQSxVQUFBNkMsU0FBQSxRQ0pBdUosUUFDQUMsT0FBQSxjQUNBQyxRQUFBLGVBQUFyRCxjQUVBQSxhQUFBcEcsU0FBQSxRQ0pBdUosUUFDQUMsT0FBQSxjQUNBOUIsT0FBQUEsUUNGQTZCLFFBQ0FDLE9BQUEsY0FDQUUsUUFBQSxTQUFBdE0sUUFFQUEsT0FBQTRDLFNBQUEsT0FBQSxTQ0pBdUosUUFDQUMsT0FBQSxjQUNBRSxRQUFBLFlBQUE1SCxXQUVBQSxVQUFBOUIsU0FBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2NvbmZpcm1hdGlvbkNvbnRyb2xsZXInLCBjb25maXJtYXRpb25Db250cm9sbGVyKTtcblxuY29uZmlybWF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlybWF0aW9uQ29udHJvbGxlcigkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG59XHQiLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmRpbmdDb250cm9sbGVyJywgbGFuZGluZ0NvbnRyb2xsZXIpO1xuXG5sYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsICdkYXRhTW9kZWwnLCAnc2VydmVyJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFuZGluZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRyb290U2NvcGUsIGRhdGFNb2RlbCwgc2VydmVyKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5tb2RlbCA9IGRhdGFNb2RlbDtcblxuXHQvL3dhdGNoZXJzXG5cdCRzY29wZS4kd2F0Y2goJ3ZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3MuemlwJywgZnVuY3Rpb24oY3VycmVudCwgb3JpZ2luYWwpIHtcblx0XHRpZih2bS5tb2RlbC5jb3B5U2hpcHBpbmdBZGRyZXNzKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3MuemlwID0gY3VycmVudDtcblx0fSk7XG5cdFxuXHQkc2NvcGUuJHdhdGNoKCd2bS5tb2RlbC5zaGlwcGluZy5hZGRyZXNzLmNpdHknLCBmdW5jdGlvbihjdXJyZW50LCBvcmlnaW5hbCkge1xuXHRcdGlmKHZtLm1vZGVsLmNvcHlTaGlwcGluZ0FkZHJlc3MpIHZtLm1vZGVsLmJpbGxpbmcuYWRkcmVzcy5jaXR5ID0gY3VycmVudDtcblx0fSk7XG5cdFxuXHQkc2NvcGUuJHdhdGNoKCd2bS5tb2RlbC5zaGlwcGluZy5hZGRyZXNzLnN0YXRlJywgZnVuY3Rpb24oY3VycmVudCwgb3JpZ2luYWwpIHtcblx0XHRpZih2bS5tb2RlbC5jb3B5U2hpcHBpbmdBZGRyZXNzKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3Muc3RhdGUgPSBjdXJyZW50O1xuXHR9KTtcblx0XG5cdCRzY29wZS4kd2F0Y2goJ3ZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3Muc3RyZWV0MScsIGZ1bmN0aW9uKGN1cnJlbnQsIG9yaWdpbmFsKSB7XG5cdFx0aWYodm0ubW9kZWwuY29weVNoaXBwaW5nQWRkcmVzcykgdm0ubW9kZWwuYmlsbGluZy5hZGRyZXNzLnN0cmVldDEgPSBjdXJyZW50O1xuXHR9KTtcblx0XG5cdCRzY29wZS4kd2F0Y2goJ3ZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3Muc3RyZWV0MicsIGZ1bmN0aW9uKGN1cnJlbnQsIG9yaWdpbmFsKSB7XG5cdFx0aWYodm0ubW9kZWwuY29weVNoaXBwaW5nQWRkcmVzcykgdm0ubW9kZWwuYmlsbGluZy5hZGRyZXNzLnN0cmVldDIgPSBjdXJyZW50O1xuXHR9KTtcdFxuXHRcblx0JHNjb3BlLiR3YXRjaCgndm0ubW9kZWwuc2hpcHBpbmcuYWRkcmVzcy5zdHJlZXQzJywgZnVuY3Rpb24oY3VycmVudCwgb3JpZ2luYWwpIHtcblx0XHRpZih2bS5tb2RlbC5jb3B5U2hpcHBpbmdBZGRyZXNzKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3Muc3RyZWV0MyA9IGN1cnJlbnQ7XG5cdH0pO1x0XHRcblxuXHQvL3ByaXZhdGUgZnVuY3Rpb25zXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0XG5cdFx0Ly9UT0RPOiBNT1ZFIFRISVMgVE8gUk9VVEVTIExBVEVSXG5cdFx0c2VydmVyLmdldFNxckFwcElkKCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0Ly8kbG9nLmluZm8oJ3Jlc3BvbnNlJywgcmVzcG9uc2UuaWQpO1xuXHRcdFx0dm0ubW9kZWwuYXBpcy5zcXVhcmVJZCA9IHJlc3BvbnNlLmlkO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdC8vdmlldyBtb2RlbCBtZXRob2RzXG5cdHZtLmNvcHlTaGlwcGluZ0FkZHJlc3MgPSBmdW5jdGlvbihidG5TdGF0ZSkge1xuXHRcdC8vJGxvZy5pbmZvKCdjb3B5aW5nJywgdm0ubW9kZWwuc2hpcHBpbmcpO1xuXHRcdGlmKGJ0blN0YXRlKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3MgPSB2bS5tb2RlbC5zaGlwcGluZy5hZGRyZXNzO1xuXHRcdGVsc2Ugdm0ubW9kZWwuYmlsbGluZy5hZGRyZXNzID0gZGF0YU1vZGVsLmJpbGxpbmcuYWRkcmVzcztcblx0fVxuXG5cdHZtLnN1Ym1pdEZvcm0gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdCRsb2cuaW5mbygnc3VibWl0dGluZycsIHZhbHVlKTtcblxuXHRcdHNlcnZlci5zdWJtaXRTYWxlKHZtLm1vZGVsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdCRsb2cuaW5mbyhyZXNwb25zZSk7XG5cblx0XHRcdC8vd2hlbiB0aGUgcHJvbWlzZSByZXNvbHZlcywgcmUtcm91dGUgdGhlbVxuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy9jb25maXJtYXRpb24vP3Rlc2luZz1nb29kVGVzdCcpO1xuXHRcdFx0JHJvb3RTY29wZS4kYXBwbHkoKTtcblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cblx0XHRcdCRsb2cuaW5mbyhlcnJvcik7XG5cdFx0fSk7XG5cblx0XHQvL3Rha2UgdGhlbSBpbW1lZGlhdGx5IHRvIHRoZSBwcm9jZXNzaW5nIHBhZ2Vcblx0XHQkbG9jYXRpb24ucGF0aCgnL3Byb2Nlc3NpbmcnKTtcblxuXHR9XG5cblx0Ly9zdGFydCBjb250cm9sbGVyXG5cdGluaXQoKTtcblxufVx0IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5jb250cm9sbGVyKCdwcm9jZXNzaW5nQ29udHJvbGxlcicsIHByb2Nlc3NpbmdDb250cm9sbGVyKTtcblxucHJvY2Vzc2luZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICd0ZXN0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvY2Vzc2luZ0NvbnRyb2xsZXIoJGxvZywgdGVzdCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxufVx0IiwiLy8gTU9EVUxFXG5jb25maWcuJGluamVjdCA9IFtcIiRyb3V0ZVByb3ZpZGVyXCJdO1xudmFyIHRydW1wc051dHMgPSBhbmd1bGFyLm1vZHVsZSgndHJ1bXBzTnV0cycsIFsnbmdSb3V0ZSddKTtcblxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLmNvbnRyb2xsZXIoJ2NvbmZpcm1hdGlvbkNvbnRyb2xsZXInLCBjb25maXJtYXRpb25Db250cm9sbGVyKTtcblxuY29uZmlybWF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlybWF0aW9uQ29udHJvbGxlcigkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG59XHRcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCd0cnVtcHNOdXRzJylcbiAgICAuY29udHJvbGxlcignbGFuZGluZ0NvbnRyb2xsZXInLCBsYW5kaW5nQ29udHJvbGxlcik7XG5cbmxhbmRpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJ2RhdGFNb2RlbCcsICdzZXJ2ZXInXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJHJvb3RTY29wZSwgZGF0YU1vZGVsLCBzZXJ2ZXIpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLm1vZGVsID0gZGF0YU1vZGVsO1xuXG5cdC8vd2F0Y2hlcnNcblx0JHNjb3BlLiR3YXRjaCgndm0ubW9kZWwuc2hpcHBpbmcuYWRkcmVzcy56aXAnLCBmdW5jdGlvbihjdXJyZW50LCBvcmlnaW5hbCkge1xuXHRcdGlmKHZtLm1vZGVsLmNvcHlTaGlwcGluZ0FkZHJlc3MpIHZtLm1vZGVsLmJpbGxpbmcuYWRkcmVzcy56aXAgPSBjdXJyZW50O1xuXHR9KTtcblx0XG5cdCRzY29wZS4kd2F0Y2goJ3ZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3MuY2l0eScsIGZ1bmN0aW9uKGN1cnJlbnQsIG9yaWdpbmFsKSB7XG5cdFx0aWYodm0ubW9kZWwuY29weVNoaXBwaW5nQWRkcmVzcykgdm0ubW9kZWwuYmlsbGluZy5hZGRyZXNzLmNpdHkgPSBjdXJyZW50O1xuXHR9KTtcblx0XG5cdCRzY29wZS4kd2F0Y2goJ3ZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3Muc3RhdGUnLCBmdW5jdGlvbihjdXJyZW50LCBvcmlnaW5hbCkge1xuXHRcdGlmKHZtLm1vZGVsLmNvcHlTaGlwcGluZ0FkZHJlc3MpIHZtLm1vZGVsLmJpbGxpbmcuYWRkcmVzcy5zdGF0ZSA9IGN1cnJlbnQ7XG5cdH0pO1xuXHRcblx0JHNjb3BlLiR3YXRjaCgndm0ubW9kZWwuc2hpcHBpbmcuYWRkcmVzcy5zdHJlZXQxJywgZnVuY3Rpb24oY3VycmVudCwgb3JpZ2luYWwpIHtcblx0XHRpZih2bS5tb2RlbC5jb3B5U2hpcHBpbmdBZGRyZXNzKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3Muc3RyZWV0MSA9IGN1cnJlbnQ7XG5cdH0pO1xuXHRcblx0JHNjb3BlLiR3YXRjaCgndm0ubW9kZWwuc2hpcHBpbmcuYWRkcmVzcy5zdHJlZXQyJywgZnVuY3Rpb24oY3VycmVudCwgb3JpZ2luYWwpIHtcblx0XHRpZih2bS5tb2RlbC5jb3B5U2hpcHBpbmdBZGRyZXNzKSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3Muc3RyZWV0MiA9IGN1cnJlbnQ7XG5cdH0pO1x0XG5cdFxuXHQkc2NvcGUuJHdhdGNoKCd2bS5tb2RlbC5zaGlwcGluZy5hZGRyZXNzLnN0cmVldDMnLCBmdW5jdGlvbihjdXJyZW50LCBvcmlnaW5hbCkge1xuXHRcdGlmKHZtLm1vZGVsLmNvcHlTaGlwcGluZ0FkZHJlc3MpIHZtLm1vZGVsLmJpbGxpbmcuYWRkcmVzcy5zdHJlZXQzID0gY3VycmVudDtcblx0fSk7XHRcdFxuXG5cdC8vcHJpdmF0ZSBmdW5jdGlvbnNcblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHRcblx0XHQvL1RPRE86IE1PVkUgVEhJUyBUTyBST1VURVMgTEFURVJcblx0XHRzZXJ2ZXIuZ2V0U3FyQXBwSWQoKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0XHQvLyRsb2cuaW5mbygncmVzcG9uc2UnLCByZXNwb25zZS5pZCk7XG5cdFx0XHR2bS5tb2RlbC5hcGlzLnNxdWFyZUlkID0gcmVzcG9uc2UuaWQ7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0Ly92aWV3IG1vZGVsIG1ldGhvZHNcblx0dm0uY29weVNoaXBwaW5nQWRkcmVzcyA9IGZ1bmN0aW9uKGJ0blN0YXRlKSB7XG5cdFx0Ly8kbG9nLmluZm8oJ2NvcHlpbmcnLCB2bS5tb2RlbC5zaGlwcGluZyk7XG5cdFx0aWYoYnRuU3RhdGUpIHZtLm1vZGVsLmJpbGxpbmcuYWRkcmVzcyA9IHZtLm1vZGVsLnNoaXBwaW5nLmFkZHJlc3M7XG5cdFx0ZWxzZSB2bS5tb2RlbC5iaWxsaW5nLmFkZHJlc3MgPSBkYXRhTW9kZWwuYmlsbGluZy5hZGRyZXNzO1xuXHR9XG5cblx0dm0uc3VibWl0Rm9ybSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nJywgdmFsdWUpO1xuXG5cdFx0c2VydmVyLnN1Ym1pdFNhbGUodm0ubW9kZWwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuXHRcdFx0JGxvZy5pbmZvKHJlc3BvbnNlKTtcblxuXHRcdFx0Ly93aGVuIHRoZSBwcm9taXNlIHJlc29sdmVzLCByZS1yb3V0ZSB0aGVtXG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnL2NvbmZpcm1hdGlvbi8/dGVzaW5nPWdvb2RUZXN0Jyk7XG5cdFx0XHQkcm9vdFNjb3BlLiRhcHBseSgpO1xuXG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblxuXHRcdFx0JGxvZy5pbmZvKGVycm9yKTtcblx0XHR9KTtcblxuXHRcdC8vdGFrZSB0aGVtIGltbWVkaWF0bHkgdG8gdGhlIHByb2Nlc3NpbmcgcGFnZVxuXHRcdCRsb2NhdGlvbi5wYXRoKCcvcHJvY2Vzc2luZycpO1xuXG5cdH1cblxuXHQvL3N0YXJ0IGNvbnRyb2xsZXJcblx0aW5pdCgpO1xuXG59XHRcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCd0cnVtcHNOdXRzJylcbiAgICAuY29udHJvbGxlcigncHJvY2Vzc2luZ0NvbnRyb2xsZXInLCBwcm9jZXNzaW5nQ29udHJvbGxlcik7XG5cbnByb2Nlc3NpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAndGVzdCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2Nlc3NpbmdDb250cm9sbGVyKCRsb2csIHRlc3QpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cbn1cdFxuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2JpbGxpbmdJbmZvJywgYmlsbGluZ0luZm8pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJpbGxpbmdJbmZvKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvYmlsbGluZ0luZm8uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0YWRkcmVzczogJz0nLFxuXHRcdFx0cGF5bWVudDogJz0nLFxuXHRcdFx0Y29weVNoaXBwaW5nQWRkcmVzczogJz0nLFxuXHRcdFx0Y29weVNoaXBwaW5nOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGJpbGxpbmdJbmZvQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGJpbGxpbmdJbmZvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGJpbGxpbmdJbmZvQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vdmlldyBtb2RlbCBtZXRob2RzXG5cdCAgICB2bS50b2dnbGVBZGRyZXNzQ29weSA9IGZ1bmN0aW9uKGJ0blN0YXRlKSB7XG5cblx0ICAgIFx0dm0uY29weVNoaXBwaW5nKCkoYnRuU3RhdGUpO1xuXG5cdCAgICB9XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2NDU1YnLCBjY0NTVik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2NDU1YoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jY0NTVi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjY0NTVkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjY0NTVkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjY0NTVkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2NDYXB0dXJlJywgY2NDYXB0dXJlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjY0NhcHR1cmUoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jY0NhcHR1cmUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2NDYXB0dXJlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNjQ2FwdHVyZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjY0NhcHR1cmVDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NjRXhwJywgY2NFeHApO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNjRXhwKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2NFeHAuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2NFeHBDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2NFeHBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2NFeHBDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NjTmFtZScsIGNjTmFtZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2NOYW1lKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2NOYW1lLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNjTmFtZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjY05hbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2NOYW1lQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdjY051bWJlcicsIGNjTnVtYmVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjY051bWJlcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NjTnVtYmVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNjTnVtYmVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNjTnVtYmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNjTnVtYmVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdjaXR5JywgY2l0eSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2l0eSgpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NpdHkuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0Y2l0eU5hbWU6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2l0eUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjaXR5Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNpdHlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NvbnRhY3RJbmZvJywgY29udGFjdEluZm8pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbnRhY3RJbmZvKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY29udGFjdEluZm8uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0bmFtZTogJz0nLFxuXHRcdFx0ZW1haWw6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY29udGFjdEluZm9Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY29udGFjdEluZm9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29udGFjdEluZm9Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2VtYWlsQWRkcmVzcycsIGVtYWlsQWRkcmVzcyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZW1haWxBZGRyZXNzKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZW1haWxBZGRyZXNzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGVtYWlsOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGVtYWlsQWRkcmVzc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBlbWFpbEFkZHJlc3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZW1haWxBZGRyZXNzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdmaXJzdE5hbWUnLCBmaXJzdE5hbWUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZpcnN0TmFtZSgpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2ZpcnN0TmFtZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRmaXJzdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBmaXJzdE5hbWVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZmlyc3ROYW1lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdzdGF0ZURhdGEnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmaXJzdE5hbWVDb250cm9sbGVyKCRzY29wZSwgJGxvZywgc3RhdGVEYXRhKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvLyRsb2cuaW5mbyhzdGF0ZSk7XG5cblx0ICAgIHZtLnN0YXRlID0ge1xuXHRcdCAgICBjb250YWluZXI6IHtcblx0XHQgICAgXHRjbGFzc2VzOiBzdGF0ZURhdGEuaW5pdENsYXNzZXMoJ2NvbnRhaW5lcicpLFxuXHRcdCAgICBcdHN0eWxlczogc3RhdGVEYXRhLmluaXRTdHlsZXMoJ2NvbnRhaW5lcicpXHQgICAgXHRcdFxuXHQgICAgXHR9LCBcblx0ICAgIFx0aW5wdXQ6IHtcblx0XHQgICAgXHRjbGFzc2VzOiBzdGF0ZURhdGEuaW5pdENsYXNzZXMoJ2lucHV0JyksXG5cdFx0ICAgIFx0c3R5bGVzOiBzdGF0ZURhdGEuaW5pdFN0eWxlcygnY29udGFpbmVyJylcblx0ICAgIFx0fVxuXHQgICAgfVxuXG5cdCAgICAvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHQgICAgdm0udmFsaWRhdGUgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUpIHtcblx0ICAgIFx0XG5cdCAgICBcdC8vaWYodmFsdWUubGVuZ3RoID4gMSkgc3RhdGUuY2hhbmdlU3RhdGUuaW5wdXRTdWNjZXNzKClcblxuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2xhc3ROYW1lJywgbGFzdE5hbWUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhc3ROYW1lKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbGFzdE5hbWUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0bGFzdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsYXN0TmFtZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsYXN0TmFtZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsYXN0TmFtZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJvZHVjdFNlbGVjdGlvbicsIHByb2R1Y3RTZWxlY3Rpb24pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2R1Y3RTZWxlY3Rpb24oKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wcm9kdWN0U2VsZWN0aW9uLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHF0eTogJz0nLFxuXHRcdFx0cHJpY2U6ICc9Jyxcblx0XHRcdHN1YnRvdGFsOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHByb2R1Y3RTZWxlY3Rpb25Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcHJvZHVjdFNlbGVjdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwcm9kdWN0U2VsZWN0aW9uQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vcHJpdmF0ZSBtZXRob2RzXG5cblxuXHQgICAgLy92aWV3IG1vZGVsIG1ldGhvZHNcblx0ICAgIHZtLmNhbGN1bGF0ZVN1YnRvdGFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdHZtLnN1YnRvdGFsID0gdm0ucXR5ICogdm0ucHJpY2U7XG5cdCAgICB9XG5cblx0ICAgXHR2bS5kZWNyZW1lbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0aWYodm0ucXR5ID4gMSkgdm0ucXR5ID0gdm0ucXR5IC0gMTtcblxuXHQgICAgXHR2bS5jYWxjdWxhdGVTdWJ0b3RhbCgpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5pbmNyZW1lbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0dm0ucXR5ID0gdm0ucXR5ICsgMTtcblxuXHQgICAgXHR2bS5jYWxjdWxhdGVTdWJ0b3RhbCgpO1xuXHQgICAgfVxuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJvZ3Jlc3NCYXInLCBwcm9ncmVzc0Jhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvZ3Jlc3NCYXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wcm9ncmVzc0Jhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwcm9ncmVzc0JhckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwcm9ncmVzc0JhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwcm9ncmVzc0JhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgncHVyY2hhc2VCdG4nLCBwdXJjaGFzZUJ0bik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHVyY2hhc2VCdG4oKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wdXJjaGFzZUJ0bi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzdWJtaXRGb3JtOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHB1cmNoYXNlQnRuQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHB1cmNoYXNlQnRuQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHB1cmNoYXNlQnRuQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdzaGlwcGluZ0NhbGN1bGF0b3InLCBzaGlwcGluZ0NhbGN1bGF0b3IpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNoaXBwaW5nQ2FsY3VsYXRvcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NoaXBwaW5nQ2FsY3VsYXRvci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzaGlwcGluZ0NhbGN1bGF0b3JDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2hpcHBpbmdDYWxjdWxhdG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNoaXBwaW5nQ2FsY3VsYXRvckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2hpcHBpbmdJbmZvJywgc2hpcHBpbmdJbmZvKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaGlwcGluZ0luZm8oKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zaGlwcGluZ0luZm8uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0YWRkcmVzczogJz0nLFxuXHRcdFx0cmVxdWlybm1lbnRzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNoaXBwaW5nSW5mb0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzaGlwcGluZ0luZm9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2hpcHBpbmdJbmZvQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbyh2bS5hZGRyZXNzKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3N0YXRlJywgc3RhdGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0YXRlKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc3RhdGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c3RhdGVJZDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzdGF0ZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzdGF0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzdGF0ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnc3RyZWV0Jywgc3RyZWV0KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzdHJlZXQoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zdHJlZXQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c3RyZWV0QWRkcmVzczogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzdHJlZXRDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc3RyZWV0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHN0cmVldENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgndG9vbEJhcicsIHRvb2xCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvb2xCYXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90b29sQmFyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IFRvb2xCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgVG9vbEJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBUb29sQmFyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCd5b3VyTmFtZScsIHlvdXJOYW1lKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB5b3VyTmFtZSgpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3lvdXJOYW1lLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG5hbWU6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogeW91ck5hbWVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgeW91ck5hbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24geW91ck5hbWVDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3ppcENvZGUnLCB6aXBDb2RlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB6aXBDb2RlKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvemlwQ29kZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHR1bmlxdWVJZDogJz0nLFxuXHRcdFx0emlwOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHppcENvZGVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgemlwQ29kZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnc2VydmVyJywgJ3N0YXRlRGF0YSddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHppcENvZGVDb250cm9sbGVyKCRzY29wZSwgJGxvZywgc2VydmVyLCBzdGF0ZURhdGEpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICBcblx0ICAgIC8vZGVmaW5lIHZpZXdtb2RlbCB2YXJpYWJsZXNcblx0ICAgIHZtLnZhbFN0YWdlcyA9IHN0YXRlRGF0YS5pbml0VmFsU3RhZ2VzKCk7XG5cblx0ICAgIHZtLnN0YXRlID0ge1xuXHRcdCAgICBjb250YWluZXI6IHtcblx0XHQgICAgXHRjbGFzc2VzOiBzdGF0ZURhdGEuaW5pdENsYXNzZXMoJ2NvbnRhaW5lcicpLFxuXHRcdCAgICBcdHN0eWxlczogc3RhdGVEYXRhLmluaXRTdHlsZXMoJ2NvbnRhaW5lcicpXHQgICAgXHRcdFxuXHQgICAgXHR9LCBcblx0ICAgIFx0aW5wdXQ6IHtcblx0XHQgICAgXHRjbGFzc2VzOiBzdGF0ZURhdGEuaW5pdENsYXNzZXMoJ2lucHV0JyksXG5cdFx0ICAgIFx0c3R5bGVzOiBzdGF0ZURhdGEuaW5pdFN0eWxlcygnY29udGFpbmVyJylcblx0ICAgIFx0fVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBsb25nRW5vdWdoKHppcGNvZGUpIHtcblx0ICAgIFx0dmFyIGZsYWcgPSBmYWxzZTtcblxuXHQgICAgXHRpZih0eXBlb2YgemlwY29kZSAhPSAndW5kZWZpbmVkJylcblx0ICAgIFx0XHRpZih6aXBjb2RlLmxlbmd0aCA+PSA1KSBmbGFnID0gdHJ1ZTtcblxuXHQgICAgXHRyZXR1cm4gZmxhZztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc3VjY2Vzc2lmeUlucHV0KCkgeyBcblx0ICAgIFx0Ly8kbG9nLmluZm8oJ3N1Y2Nlc3MnLCB2bS5zdGF0ZS5jb250YWluZXIpO1xuXHQgICAgXHR2bS5zdGF0ZS5jb250YWluZXIuY2xhc3NlcyA9IHN0YXRlRGF0YS51cGRhdGVTdGF0ZSgnY29udGFpbmVyJywgJ3N1Y2Nlc3MnKTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLXN1Y2Nlc3MnXSA9IHRydWU7XG5cdCAgICBcdC8vdm0uc3RhdGUuY29udGFpbmVyLmNsYXNzZXNbJ2hhcy13YXJuaW5nJ10gPSBmYWxzZTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLWRhbmdlciddID0gZmFsc2U7XG5cdCAgICBcdHZtLnN0YXRlLmlucHV0LmNsYXNzZXMgPSBzdGF0ZURhdGEudXBkYXRlU3RhdGUoJ2lucHV0JywgJ3N1Y2Nlc3MnKTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtc3VjY2VzcyddID0gdHJ1ZTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtd2FybmluZyddID0gZmFsc2U7XG5cdCAgICBcdC8vdm0uc3RhdGUuaW5wdXQuY2xhc3Nlc1snZm9ybS1jb250cm9sLWRhbmdlciddID0gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGZhaWxpZnlJbnB1dCgpIHsgXG5cdCAgICBcdC8vJGxvZy5pbmZvKCdmYWlsZWQnKTtcblx0ICAgIFx0dm0uc3RhdGUuY29udGFpbmVyLmNsYXNzZXNbJ2hhcy1zdWNjZXNzJ10gPSBmYWxzZTtcblx0ICAgIFx0dm0uc3RhdGUuY29udGFpbmVyLmNsYXNzZXNbJ2hhcy13YXJuaW5nJ10gPSB0cnVlO1xuXHQgICAgXHR2bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLWRhbmdlciddID0gZmFsc2U7XG5cblx0ICAgIFx0dm0uc3RhdGUuaW5wdXQuY2xhc3Nlc1snZm9ybS1jb250cm9sLXN1Y2Nlc3MnXSA9IGZhbHNlO1xuXHQgICAgXHR2bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtd2FybmluZyddID0gdHJ1ZTtcblx0ICAgIFx0dm0uc3RhdGUuaW5wdXQuY2xhc3Nlc1snZm9ybS1jb250cm9sLWRhbmdlciddID0gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNpdHlTdGF0ZUxvb2t1cCh6aXBjb2RlKSB7XG5cdFx0ICAgIHNlcnZlci5jaXR5U3RhdGVMb29rdXAoemlwY29kZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdCAgICBcdCRsb2cuaW5mbygnZ290IHRoaXMgcmVzcG9uc2UnLCByZXNwb25zZSk7XG5cdFx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0ICAgIFx0JGxvZy5pbmZvKCdnb3QgdGhpcyBlcnJvcicsIGVycm9yKTtcblx0XHQgICAgfSk7XHQgICAgXHRcblx0ICAgIH1cblxuXHQgICAgdm0udmFsaWRhdGUgPSBmdW5jdGlvbih6aXBjb2RlKSB7XG5cblx0ICAgIFx0Ly9vbmx5IHZhbGlkYXRlIGlmIHRoZXkndmUgdHJpZWQgYXQgbGVhc3Qgb25jZVxuXHQgICAgXHRpZih2bS52YWxTdGFnZXMuYXR0ZW1wdGVkKSB7XG5cblx0ICAgIFx0XHQvL2NoZWNrIGlmIGl0J3MgbG9uZyBlbm91Z2hcblx0ICAgIFx0XHRpZihsb25nRW5vdWdoKHppcGNvZGUpKSBzdWNjZXNzaWZ5SW5wdXQoKTtcblx0ICAgIFx0XHRlbHNlIGZhaWxpZnlJbnB1dCgpO1xuXG5cdCAgICBcdH1cblxuXHQgICAgfVxuXG5cdCAgICB2bS5zdWJtaXQgPSBmdW5jdGlvbih6aXBjb2RlKSB7XG5cblx0ICAgIFx0dm0udmFsU3RhZ2VzLmF0dGVtcHRlZCA9IHRydWU7XG5cblx0ICAgIFx0dm0udmFsaWRhdGUoemlwY29kZSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCd0cnVtcHNOdXRzJylcbiAgICAuZmFjdG9yeSgnZGF0YU1vZGVsJywgZGF0YU1vZGVsKTtcblxuZGF0YU1vZGVsLiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRhTW9kZWwoJGxvZykge1xuXG5cdHZhciBkYXRhTW9kZWxPYmplY3QgPSB7XG5cdFx0bmFtZToge1xuXHRcdFx0Zmlyc3Q6ICcnLFxuXHRcdFx0bGFzdDogJydcblx0XHR9LFxuXHRcdGVtYWlsOiAnJyxcblx0XHRjb3B5U2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuXHRcdHByb2R1Y3Q6IHtcblx0XHRcdHByaWNlOiAyMDAwXG5cdFx0fSxcblx0XHRvcmRlcjoge1xuXHRcdFx0cXR5OiAxLFxuXHRcdFx0Y29zdDoge1xuXHRcdFx0XHRzdWJ0b3RhbDogMjAwMCxcblx0XHRcdFx0dGF4OiAwLFxuXHRcdFx0XHRkaXNjb3VudHM6IHtcblx0XHRcdFx0XHRwcm9tb3Rpb25zOiBbXSxcblx0XHRcdFx0XHR0b3RhbFZhbHVlOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvdGFsOiAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzaGlwcGluZzoge1xuXHRcdFx0YWRkcmVzczoge1xuXHRcdFx0XHRzdHJlZXQxOiAnJyxcblx0XHRcdFx0c3RyZWV0MjogJycsXG5cdFx0XHRcdHN0cmVldDM6ICcnLFxuXHRcdFx0XHRjaXR5OiAnJyxcblx0XHRcdFx0c3RhdGU6ICcnLFxuXHRcdFx0XHR6aXA6ICcnXG5cdFx0XHR9LCBcblx0XHRcdHJlcXVpcm5tZW50czoge31cblx0XHR9LFxuXHRcdGJpbGxpbmc6IHtcblx0XHRcdGFkZHJlc3M6IHtcblx0XHRcdFx0c3RyZWV0MTogJycsXG5cdFx0XHRcdHN0cmVldDI6ICcnLFxuXHRcdFx0XHRzdHJlZXQzOiAnJyxcblx0XHRcdFx0Y2l0eTogJycsXG5cdFx0XHRcdHN0YXRlOiAnJyxcblx0XHRcdFx0emlwOiAnJ1xuXHRcdFx0fSxcblx0XHRcdHBheW1lbnQ6IHtcblx0XHRcdFx0bnVtYmVyOiBbJycsICcnLCAnJywgJyddLFxuXHRcdFx0XHRleHA6IFsnJywgJyddLFxuXHRcdFx0XHRjc3Y6ICcnXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcGlzOiB7XG5cdFx0XHRzcXVhcmVJZDogJydcblx0XHR9LFxuXHRcdF9yZWFkOl9yZWFkLFxuXHRcdF91cGRhdGU6X3VwZGF0ZSxcblx0XHRyZWFkUHJvcDpyZWFkUHJvcCxcblx0XHR1cGRhdGVQcm9wOnVwZGF0ZVByb3Bcblx0fTtcblxuXHRmdW5jdGlvbiBfcmVhZChwcm9wKSB7fVxuXHRmdW5jdGlvbiBfdXBkYXRlKHByb3AsIHZhbHVlKSB7fVxuXHRmdW5jdGlvbiByZWFkUHJvcChwcm9wKSB7fVxuXHRmdW5jdGlvbiB1cGRhdGVQcm9wKHByb3AsIHZhbHVlKSB7fVxuXG5cdHJldHVybiBkYXRhTW9kZWxPYmplY3Q7XG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLmZhY3RvcnkoJ3N0YXRlRmFjdG9yeScsIHN0YXRlRmFjdG9yeSk7XG5cbnN0YXRlRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGVGYWN0b3J5KCRsb2cpIHtcblxuXHR2YXIgc3RhdGVPYmplY3QgPSB7XG5cdFx0bW9kZWw6IHtcblx0XHRcdGFsbEVsZW1lbnRzQ29tcGxldGVkOiBmYWxzZSxcblx0XHRcdGZpZWxkczogW10sXG5cdFx0XHRpbnB1dDoge1xuXHRcdFx0XHRwcm9wOiB7XG5cdFx0XHRcdFx0bmFtZTogJycsXG5cdFx0XHRcdFx0cmVxdWlybm1lbnRzOiBbXVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdGF0ZToge1xuXHRcdFx0XHRcdGFkZHJlc3NlZDogZmFsc2UsXG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZmFpbHVyZTogZmFsc2Vcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0J2Zvcm0tZ3JvdXAnOiBmYWxzZSxcblx0XHRcdCdoYXMtc3VjY2Vzcyc6IGZhbHNlLFxuXHRcdFx0J2hhcy13YXJuaW5nJzogZmFsc2UsXG5cdFx0XHQnaGFzLWRhbmdlcic6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbC1sYWJlbCc6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbCc6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbC1zdWNjZXNzJzogZmFsc2UsXG5cdFx0XHQnZm9ybS1jb250cm9sLXdhcm5pbmcnOiBmYWxzZSxcblx0XHRcdCdmb3JtLWNvbnRyb2wtZGFuZ2VyJzogZmFsc2UsXG5cdFx0XHQnZm9ybS1jb250cm9sLWZlZWRiYWNrJzogZmFsc2UsXG5cdFx0XHQnZm9ybS10ZXh0JzogZmFsc2UsXG5cdFx0XHQndGV4dC1tdXRlZCc6IGZhbHNlXG5cdFx0fSxcblx0XHRzdHlsZXM6IHtcblxuXHRcdH0sXG5cdFx0Y2hhbmdlU3RhdGU6IHtcblx0XHRcdGlucHV0U3VjY2VzczogJycsXG5cdFx0XHRpbnB1dEZhaWxlZDogJydcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpbnB1dFN1Y2Nlc3MoKSB7fVxuXHRmdW5jdGlvbiBpbnB1dEZhaWxlZCgpIHt9XG5cblx0cmV0dXJuIHN0YXRlT2JqZWN0O1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5jb25maWcoY29uZmlnKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHsgICBcbiAgICAkcm91dGVQcm92aWRlclxuICAgIC8vZGVmaW5lIHRoZSBsYW5kaW5nIHBhZ2VcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbGFuZGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvcHJvY2Vzc2luZycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wcm9jZXNzaW5nLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdwcm9jZXNzaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgeyByZXR1cm4gJ2F3ZXNvbWUnOyB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvY29uZmlybWF0aW9uJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NvbmZpcm1hdGlvbi5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnY29uZmlybWF0aW9uQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pO1xufVxuXG5cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5zZXJ2aWNlKCdzZXJ2ZXInLCBzZXJ2ZXIpO1xuXG5zZXJ2ZXIuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlcnZlcigkbG9nLCAkaHR0cCkge1xuXHR2YXIgYmFja2VuZCA9IHRoaXM7XG5cblx0Ly9nZXRzIGZyb20gdGhlIHNlcnZlclxuXHRiYWNrZW5kLl9nZXQgPSBmdW5jdGlvbih1cmwpIHtcblx0XHQvLyRsb2cuaW5mbygnZ2V0dGluZyBCYWNrZW5kJyk7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Ly8kbG9nLmluZm8ocmVzcG9uc2UpO1xuXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIHRoZUVycm9ycyhlcnJvcikge1xuXG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdC8vcG9zdHMgdG8gdGhlIHNlcnZlclxuXHRiYWNrZW5kLl9wb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcblxuXHRcdCRsb2cuaW5mbygndXJsJywgdXJsLCAnZGF0YScsIGRhdGEpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdCRodHRwLnBvc3QodXJsLCBkYXRhLCBjb25maWcpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblxuXHRcdFx0fSwgZnVuY3Rpb24gdGhlRXJyb3JzKGVycm9yKSB7XG5cblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0Ly9nZXQgdGhlIHJlcXVpcmVkIHNxdWFyZSBpZFxuXHRiYWNrZW5kLmdldFNxckFwcElkID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8kbG9nLmluZm8oJ3NlbmRpbmcgZnJvbSBzcXInKTtcblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0YmFja2VuZC5fZ2V0KCcvYXBpL3NxdWFyZUlkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHQvLyRsb2cuaW5mbygnZ290IHRoaXMnLCByZXNwb25zZSk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0Ly9yZWNlaXZlcyBhIHppcGNvZGUsIHJldHVybnMgYSBjaXR5IGFuZCBzdGF0ZVxuXHRiYWNrZW5kLmNpdHlTdGF0ZUxvb2t1cCA9IGZ1bmN0aW9uKHppcGNvZGUpIHtcblxuXHRcdC8vYnVpbGQgdGhlIG5ldyB1cmxcblx0XHR2YXIgdXJsID0gJy9hcGkvemlwY2hlY2svJyArIHppcGNvZGU7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9pbml0aWF0ZSB0aGUgcmVxdWVzdFxuXHRcdFx0YmFja2VuZC5fZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0XHRcdC8vcmV0dXJuIGEgZ29vZCByZXNwb25zZVxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblxuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblxuXHRcdFx0XHQvL3JldHVybiBhbiBlcnJvciByZXNwb25zZVxuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGJhY2tlbmQuc3VibWl0U2FsZSA9IGZ1bmN0aW9uKG9yZGVyRm9ybSkge1xuXG5cdFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nIHNhbGUnKTtcblxuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIGNvbmZpZyA9IHtcblx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTg7J1xuXHRcdH07XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9pbml0aWF0ZSB0aGUgcmVxdWVzdFxuXHRcdFx0YmFja2VuZC5fcG9zdCgnL2FwaS9vcmRlcicsIG9yZGVyRm9ybSwgY29uZmlnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Ly9yZXR1cm4gYSBnb29kIHJlc3BvbnNlXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLnNlcnZpY2UoJ3N0YXRlRGF0YScsIHN0YXRlRGF0YSk7XG5cbnN0YXRlRGF0YS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGVEYXRhKCRsb2cpIHtcblx0dmFyIHN0YXRlID0gdGhpcztcblxuXHRzdGF0ZS52YWxTdGFnZXMgPSB7XG4gICAgXHRhdHRlbXB0ZWQ6IGZhbHNlLFxuICAgIFx0c3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgXHRmYWlsZWQ6IHRydWVcblx0fTtcblxuXHRzdGF0ZS5jbGFzc2VzID0ge1xuXHRcdGNvbnRhaW5lcjoge1xuXHRcdFx0J2hhcy1zdWNjZXNzJzogZmFsc2UsXG5cdFx0XHQnaGFzLXdhcm5pbmcnOiBmYWxzZSxcblx0XHRcdCdoYXMtZGFuZ2VyJzogZmFsc2UsXHRcdFx0XG5cdFx0fSxcblx0XHRpbnB1dDoge1xuXHRcdFx0J2Zvcm0tY29udHJvbC1zdWNjZXNzJzogZmFsc2UsXG5cdFx0XHQnZm9ybS1jb250cm9sLXdhcm5pbmcnOiBmYWxzZSxcblx0XHRcdCdmb3JtLWNvbnRyb2wtZGFuZ2VyJzogZmFsc2Vcblx0XHR9XG5cdH07XG5cblx0c3RhdGUuc3R5bGVzID0ge1xuXHRcdGNvbnRhaW5lcjoge30sXG5cdFx0aW5wdXQ6IHt9XG5cdH07XG5cblx0c3RhdGUuaW5pdFZhbFN0YWdlcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzdGF0ZS52YWxTdGFnZXM7XG5cdH1cblxuXHRzdGF0ZS5pbml0Q2xhc3NlcyA9IGZ1bmN0aW9uKHNlY3Rpb24pIHtcblx0XHRyZXR1cm4gc3RhdGUuY2xhc3Nlc1tzZWN0aW9uXTtcblx0fVxuXG5cdHN0YXRlLmluaXRTdHlsZXMgPSBmdW5jdGlvbihzZWN0aW9uKSB7XG5cdFx0cmV0dXJuIHN0YXRlLnN0eWxlc1tzZWN0aW9uXTtcblx0fVxuXG5cdHN0YXRlLnVwZGF0ZVN0YXRlID0gZnVuY3Rpb24oc2VjdGlvbiwgdmFsdWUpIHtcblx0XHR2YXIgcmV0dXJuT2JqZWN0ID0gc3RhdGUuY2xhc3Nlc1tzZWN0aW9uXTtcblxuXHRcdE9iamVjdC5rZXlzKHJldHVybk9iamVjdCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdHZhciByZXN1bHRBcnJheSA9IGtleS5zcGxpdCgnLScpO1xuXG5cdFx0XHRyZXN1bHRBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHdvcmQpIHtcblx0XHRcdFx0aWYod29yZCA9PSB2YWx1ZSkgcmV0dXJuT2JqZWN0W2tleV0gPSB0cnVlO1xuXHRcdFx0XHRlbHNlIHJldHVybk9iamVjdFtrZXldID0gZmFsc2U7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9pZihrZXkuY29udGFpbnModmFsdWUpKSByZXR1cm5PYmplY3Rba2V5XSA9IHRydWU7XG5cdFx0XHQvL2Vsc2UgcmV0dXJuT2JqZWN0W2tleV0gPSBmYWxzZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiByZXR1cm5PYmplY3Q7XG5cdH1cblxufVx0IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2JpbGxpbmdJbmZvJywgYmlsbGluZ0luZm8pO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJpbGxpbmdJbmZvKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2JpbGxpbmdJbmZvLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGFkZHJlc3M6ICc9Jyxcblx0XHRcdHBheW1lbnQ6ICc9Jyxcblx0XHRcdGNvcHlTaGlwcGluZ0FkZHJlc3M6ICc9Jyxcblx0XHRcdGNvcHlTaGlwcGluZzogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBiaWxsaW5nSW5mb0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBiaWxsaW5nSW5mb0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBiaWxsaW5nSW5mb0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHQgICAgdm0udG9nZ2xlQWRkcmVzc0NvcHkgPSBmdW5jdGlvbihidG5TdGF0ZSkge1xuXG5cdCAgICBcdHZtLmNvcHlTaGlwcGluZygpKGJ0blN0YXRlKTtcblxuXHQgICAgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdjY0NTVicsIGNjQ1NWKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjY0NTVigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jY0NTVi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjY0NTVkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjY0NTVkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjY0NTVkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NjQ2FwdHVyZScsIGNjQ2FwdHVyZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2NDYXB0dXJlKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NjQ2FwdHVyZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjY0NhcHR1cmVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2NDYXB0dXJlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNjQ2FwdHVyZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ2NjRXhwJywgY2NFeHApO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNjRXhwKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NjRXhwLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNjRXhwQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNjRXhwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNjRXhwQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2NOYW1lJywgY2NOYW1lKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjY05hbWUoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2NOYW1lLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNjTmFtZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjY05hbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2NOYW1lQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnY2NOdW1iZXInLCBjY051bWJlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2NOdW1iZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2NOdW1iZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2NOdW1iZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2NOdW1iZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2NOdW1iZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdjaXR5JywgY2l0eSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2l0eSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jaXR5LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGNpdHlOYW1lOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNpdHlDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2l0eUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjaXR5Q29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnY29udGFjdEluZm8nLCBjb250YWN0SW5mbyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29udGFjdEluZm8oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY29udGFjdEluZm8uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0bmFtZTogJz0nLFxuXHRcdFx0ZW1haWw6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY29udGFjdEluZm9Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY29udGFjdEluZm9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29udGFjdEluZm9Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdlbWFpbEFkZHJlc3MnLCBlbWFpbEFkZHJlc3MpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGVtYWlsQWRkcmVzcygpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9lbWFpbEFkZHJlc3MuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0ZW1haWw6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZW1haWxBZGRyZXNzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGVtYWlsQWRkcmVzc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBlbWFpbEFkZHJlc3NDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdmaXJzdE5hbWUnLCBmaXJzdE5hbWUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZpcnN0TmFtZSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9maXJzdE5hbWUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0Zmlyc3Q6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZmlyc3ROYW1lQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGZpcnN0TmFtZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnc3RhdGVEYXRhJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmlyc3ROYW1lQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHN0YXRlRGF0YSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy8kbG9nLmluZm8oc3RhdGUpO1xuXG5cdCAgICB2bS5zdGF0ZSA9IHtcblx0XHQgICAgY29udGFpbmVyOiB7XG5cdFx0ICAgIFx0Y2xhc3Nlczogc3RhdGVEYXRhLmluaXRDbGFzc2VzKCdjb250YWluZXInKSxcblx0XHQgICAgXHRzdHlsZXM6IHN0YXRlRGF0YS5pbml0U3R5bGVzKCdjb250YWluZXInKVx0ICAgIFx0XHRcblx0ICAgIFx0fSwgXG5cdCAgICBcdGlucHV0OiB7XG5cdFx0ICAgIFx0Y2xhc3Nlczogc3RhdGVEYXRhLmluaXRDbGFzc2VzKCdpbnB1dCcpLFxuXHRcdCAgICBcdHN0eWxlczogc3RhdGVEYXRhLmluaXRTdHlsZXMoJ2NvbnRhaW5lcicpXG5cdCAgICBcdH1cblx0ICAgIH1cblxuXHQgICAgLy92aWV3IG1vZGVsIG1ldGhvZHNcblx0ICAgIHZtLnZhbGlkYXRlID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlKSB7XG5cdCAgICBcdFxuXHQgICAgXHQvL2lmKHZhbHVlLmxlbmd0aCA+IDEpIHN0YXRlLmNoYW5nZVN0YXRlLmlucHV0U3VjY2VzcygpXG5cblx0ICAgIH1cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnbGFzdE5hbWUnLCBsYXN0TmFtZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFzdE5hbWUoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbGFzdE5hbWUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0bGFzdDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsYXN0TmFtZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsYXN0TmFtZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsYXN0TmFtZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3Byb2R1Y3RTZWxlY3Rpb24nLCBwcm9kdWN0U2VsZWN0aW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcm9kdWN0U2VsZWN0aW9uKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Byb2R1Y3RTZWxlY3Rpb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cXR5OiAnPScsXG5cdFx0XHRwcmljZTogJz0nLFxuXHRcdFx0c3VidG90YWw6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcHJvZHVjdFNlbGVjdGlvbkNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwcm9kdWN0U2VsZWN0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHByb2R1Y3RTZWxlY3Rpb25Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy9wcml2YXRlIG1ldGhvZHNcblxuXG5cdCAgICAvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHQgICAgdm0uY2FsY3VsYXRlU3VidG90YWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0dm0uc3VidG90YWwgPSB2bS5xdHkgKiB2bS5wcmljZTtcblx0ICAgIH1cblxuXHQgICBcdHZtLmRlY3JlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRpZih2bS5xdHkgPiAxKSB2bS5xdHkgPSB2bS5xdHkgLSAxO1xuXG5cdCAgICBcdHZtLmNhbGN1bGF0ZVN1YnRvdGFsKCk7XG5cdCAgICB9XG5cblx0ICAgIHZtLmluY3JlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHR2bS5xdHkgPSB2bS5xdHkgKyAxO1xuXG5cdCAgICBcdHZtLmNhbGN1bGF0ZVN1YnRvdGFsKCk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgncHJvZ3Jlc3NCYXInLCBwcm9ncmVzc0Jhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJvZ3Jlc3NCYXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcHJvZ3Jlc3NCYXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcHJvZ3Jlc3NCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcHJvZ3Jlc3NCYXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcHJvZ3Jlc3NCYXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCdwdXJjaGFzZUJ0bicsIHB1cmNoYXNlQnRuKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwdXJjaGFzZUJ0bigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wdXJjaGFzZUJ0bi5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzdWJtaXRGb3JtOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHB1cmNoYXNlQnRuQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHB1cmNoYXNlQnRuQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHB1cmNoYXNlQnRuQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2hpcHBpbmdDYWxjdWxhdG9yJywgc2hpcHBpbmdDYWxjdWxhdG9yKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaGlwcGluZ0NhbGN1bGF0b3IoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2hpcHBpbmdDYWxjdWxhdG9yLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNoaXBwaW5nQ2FsY3VsYXRvckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzaGlwcGluZ0NhbGN1bGF0b3JDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2hpcHBpbmdDYWxjdWxhdG9yQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnc2hpcHBpbmdJbmZvJywgc2hpcHBpbmdJbmZvKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaGlwcGluZ0luZm8oKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2hpcHBpbmdJbmZvLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGFkZHJlc3M6ICc9Jyxcblx0XHRcdHJlcXVpcm5tZW50czogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzaGlwcGluZ0luZm9Db250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2hpcHBpbmdJbmZvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNoaXBwaW5nSW5mb0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8odm0uYWRkcmVzcyk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgnc3RhdGUnLCBzdGF0ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGUoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc3RhdGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c3RhdGVJZDogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzdGF0ZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzdGF0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzdGF0ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3N0cmVldCcsIHN0cmVldCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RyZWV0KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3N0cmVldC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzdHJlZXRBZGRyZXNzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHN0cmVldENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzdHJlZXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc3RyZWV0Q29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCd0cnVtcHNOdXRzJylcblx0LmRpcmVjdGl2ZSgndG9vbEJhcicsIHRvb2xCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvb2xCYXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdG9vbEJhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBUb29sQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIFRvb2xCYXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gVG9vbEJhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgndHJ1bXBzTnV0cycpXG5cdC5kaXJlY3RpdmUoJ3lvdXJOYW1lJywgeW91ck5hbWUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHlvdXJOYW1lKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3lvdXJOYW1lLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG5hbWU6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogeW91ck5hbWVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgeW91ck5hbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24geW91ck5hbWVDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ3RydW1wc051dHMnKVxuXHQuZGlyZWN0aXZlKCd6aXBDb2RlJywgemlwQ29kZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gemlwQ29kZSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy96aXBDb2RlLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHVuaXF1ZUlkOiAnPScsXG5cdFx0XHR6aXA6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogemlwQ29kZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICB6aXBDb2RlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdzZXJ2ZXInLCAnc3RhdGVEYXRhJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gemlwQ29kZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBzZXJ2ZXIsIHN0YXRlRGF0YSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIFxuXHQgICAgLy9kZWZpbmUgdmlld21vZGVsIHZhcmlhYmxlc1xuXHQgICAgdm0udmFsU3RhZ2VzID0gc3RhdGVEYXRhLmluaXRWYWxTdGFnZXMoKTtcblxuXHQgICAgdm0uc3RhdGUgPSB7XG5cdFx0ICAgIGNvbnRhaW5lcjoge1xuXHRcdCAgICBcdGNsYXNzZXM6IHN0YXRlRGF0YS5pbml0Q2xhc3NlcygnY29udGFpbmVyJyksXG5cdFx0ICAgIFx0c3R5bGVzOiBzdGF0ZURhdGEuaW5pdFN0eWxlcygnY29udGFpbmVyJylcdCAgICBcdFx0XG5cdCAgICBcdH0sIFxuXHQgICAgXHRpbnB1dDoge1xuXHRcdCAgICBcdGNsYXNzZXM6IHN0YXRlRGF0YS5pbml0Q2xhc3NlcygnaW5wdXQnKSxcblx0XHQgICAgXHRzdHlsZXM6IHN0YXRlRGF0YS5pbml0U3R5bGVzKCdjb250YWluZXInKVxuXHQgICAgXHR9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGxvbmdFbm91Z2goemlwY29kZSkge1xuXHQgICAgXHR2YXIgZmxhZyA9IGZhbHNlO1xuXG5cdCAgICBcdGlmKHR5cGVvZiB6aXBjb2RlICE9ICd1bmRlZmluZWQnKVxuXHQgICAgXHRcdGlmKHppcGNvZGUubGVuZ3RoID49IDUpIGZsYWcgPSB0cnVlO1xuXG5cdCAgICBcdHJldHVybiBmbGFnO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzdWNjZXNzaWZ5SW5wdXQoKSB7IFxuXHQgICAgXHQvLyRsb2cuaW5mbygnc3VjY2VzcycsIHZtLnN0YXRlLmNvbnRhaW5lcik7XG5cdCAgICBcdHZtLnN0YXRlLmNvbnRhaW5lci5jbGFzc2VzID0gc3RhdGVEYXRhLnVwZGF0ZVN0YXRlKCdjb250YWluZXInLCAnc3VjY2VzcycpO1xuXHQgICAgXHQvL3ZtLnN0YXRlLmNvbnRhaW5lci5jbGFzc2VzWydoYXMtc3VjY2VzcyddID0gdHJ1ZTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLXdhcm5pbmcnXSA9IGZhbHNlO1xuXHQgICAgXHQvL3ZtLnN0YXRlLmNvbnRhaW5lci5jbGFzc2VzWydoYXMtZGFuZ2VyJ10gPSBmYWxzZTtcblx0ICAgIFx0dm0uc3RhdGUuaW5wdXQuY2xhc3NlcyA9IHN0YXRlRGF0YS51cGRhdGVTdGF0ZSgnaW5wdXQnLCAnc3VjY2VzcycpO1xuXHQgICAgXHQvL3ZtLnN0YXRlLmlucHV0LmNsYXNzZXNbJ2Zvcm0tY29udHJvbC1zdWNjZXNzJ10gPSB0cnVlO1xuXHQgICAgXHQvL3ZtLnN0YXRlLmlucHV0LmNsYXNzZXNbJ2Zvcm0tY29udHJvbC13YXJuaW5nJ10gPSBmYWxzZTtcblx0ICAgIFx0Ly92bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtZGFuZ2VyJ10gPSBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZmFpbGlmeUlucHV0KCkgeyBcblx0ICAgIFx0Ly8kbG9nLmluZm8oJ2ZhaWxlZCcpO1xuXHQgICAgXHR2bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLXN1Y2Nlc3MnXSA9IGZhbHNlO1xuXHQgICAgXHR2bS5zdGF0ZS5jb250YWluZXIuY2xhc3Nlc1snaGFzLXdhcm5pbmcnXSA9IHRydWU7XG5cdCAgICBcdHZtLnN0YXRlLmNvbnRhaW5lci5jbGFzc2VzWydoYXMtZGFuZ2VyJ10gPSBmYWxzZTtcblxuXHQgICAgXHR2bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtc3VjY2VzcyddID0gZmFsc2U7XG5cdCAgICBcdHZtLnN0YXRlLmlucHV0LmNsYXNzZXNbJ2Zvcm0tY29udHJvbC13YXJuaW5nJ10gPSB0cnVlO1xuXHQgICAgXHR2bS5zdGF0ZS5pbnB1dC5jbGFzc2VzWydmb3JtLWNvbnRyb2wtZGFuZ2VyJ10gPSBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2l0eVN0YXRlTG9va3VwKHppcGNvZGUpIHtcblx0XHQgICAgc2VydmVyLmNpdHlTdGF0ZUxvb2t1cCh6aXBjb2RlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0ICAgIFx0JGxvZy5pbmZvKCdnb3QgdGhpcyByZXNwb25zZScsIHJlc3BvbnNlKTtcblx0XHQgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHQgICAgXHQkbG9nLmluZm8oJ2dvdCB0aGlzIGVycm9yJywgZXJyb3IpO1xuXHRcdCAgICB9KTtcdCAgICBcdFxuXHQgICAgfVxuXG5cdCAgICB2bS52YWxpZGF0ZSA9IGZ1bmN0aW9uKHppcGNvZGUpIHtcblxuXHQgICAgXHQvL29ubHkgdmFsaWRhdGUgaWYgdGhleSd2ZSB0cmllZCBhdCBsZWFzdCBvbmNlXG5cdCAgICBcdGlmKHZtLnZhbFN0YWdlcy5hdHRlbXB0ZWQpIHtcblxuXHQgICAgXHRcdC8vY2hlY2sgaWYgaXQncyBsb25nIGVub3VnaFxuXHQgICAgXHRcdGlmKGxvbmdFbm91Z2goemlwY29kZSkpIHN1Y2Nlc3NpZnlJbnB1dCgpO1xuXHQgICAgXHRcdGVsc2UgZmFpbGlmeUlucHV0KCk7XG5cblx0ICAgIFx0fVxuXG5cdCAgICB9XG5cblx0ICAgIHZtLnN1Ym1pdCA9IGZ1bmN0aW9uKHppcGNvZGUpIHtcblxuXHQgICAgXHR2bS52YWxTdGFnZXMuYXR0ZW1wdGVkID0gdHJ1ZTtcblxuXHQgICAgXHR2bS52YWxpZGF0ZSh6aXBjb2RlKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCd0cnVtcHNOdXRzJylcbiAgICAuZmFjdG9yeSgnZGF0YU1vZGVsJywgZGF0YU1vZGVsKTtcblxuZGF0YU1vZGVsLiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRhTW9kZWwoJGxvZykge1xuXG5cdHZhciBkYXRhTW9kZWxPYmplY3QgPSB7XG5cdFx0bmFtZToge1xuXHRcdFx0Zmlyc3Q6ICcnLFxuXHRcdFx0bGFzdDogJydcblx0XHR9LFxuXHRcdGVtYWlsOiAnJyxcblx0XHRjb3B5U2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuXHRcdHByb2R1Y3Q6IHtcblx0XHRcdHByaWNlOiAyMDAwXG5cdFx0fSxcblx0XHRvcmRlcjoge1xuXHRcdFx0cXR5OiAxLFxuXHRcdFx0Y29zdDoge1xuXHRcdFx0XHRzdWJ0b3RhbDogMjAwMCxcblx0XHRcdFx0dGF4OiAwLFxuXHRcdFx0XHRkaXNjb3VudHM6IHtcblx0XHRcdFx0XHRwcm9tb3Rpb25zOiBbXSxcblx0XHRcdFx0XHR0b3RhbFZhbHVlOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvdGFsOiAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzaGlwcGluZzoge1xuXHRcdFx0YWRkcmVzczoge1xuXHRcdFx0XHRzdHJlZXQxOiAnJyxcblx0XHRcdFx0c3RyZWV0MjogJycsXG5cdFx0XHRcdHN0cmVldDM6ICcnLFxuXHRcdFx0XHRjaXR5OiAnJyxcblx0XHRcdFx0c3RhdGU6ICcnLFxuXHRcdFx0XHR6aXA6ICcnXG5cdFx0XHR9LCBcblx0XHRcdHJlcXVpcm5tZW50czoge31cblx0XHR9LFxuXHRcdGJpbGxpbmc6IHtcblx0XHRcdGFkZHJlc3M6IHtcblx0XHRcdFx0c3RyZWV0MTogJycsXG5cdFx0XHRcdHN0cmVldDI6ICcnLFxuXHRcdFx0XHRzdHJlZXQzOiAnJyxcblx0XHRcdFx0Y2l0eTogJycsXG5cdFx0XHRcdHN0YXRlOiAnJyxcblx0XHRcdFx0emlwOiAnJ1xuXHRcdFx0fSxcblx0XHRcdHBheW1lbnQ6IHtcblx0XHRcdFx0bnVtYmVyOiBbJycsICcnLCAnJywgJyddLFxuXHRcdFx0XHRleHA6IFsnJywgJyddLFxuXHRcdFx0XHRjc3Y6ICcnXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcGlzOiB7XG5cdFx0XHRzcXVhcmVJZDogJydcblx0XHR9LFxuXHRcdF9yZWFkOl9yZWFkLFxuXHRcdF91cGRhdGU6X3VwZGF0ZSxcblx0XHRyZWFkUHJvcDpyZWFkUHJvcCxcblx0XHR1cGRhdGVQcm9wOnVwZGF0ZVByb3Bcblx0fTtcblxuXHRmdW5jdGlvbiBfcmVhZChwcm9wKSB7fVxuXHRmdW5jdGlvbiBfdXBkYXRlKHByb3AsIHZhbHVlKSB7fVxuXHRmdW5jdGlvbiByZWFkUHJvcChwcm9wKSB7fVxuXHRmdW5jdGlvbiB1cGRhdGVQcm9wKHByb3AsIHZhbHVlKSB7fVxuXG5cdHJldHVybiBkYXRhTW9kZWxPYmplY3Q7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5mYWN0b3J5KCdzdGF0ZUZhY3RvcnknLCBzdGF0ZUZhY3RvcnkpO1xuXG5zdGF0ZUZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0YXRlRmFjdG9yeSgkbG9nKSB7XG5cblx0dmFyIHN0YXRlT2JqZWN0ID0ge1xuXHRcdG1vZGVsOiB7XG5cdFx0XHRhbGxFbGVtZW50c0NvbXBsZXRlZDogZmFsc2UsXG5cdFx0XHRmaWVsZHM6IFtdLFxuXHRcdFx0aW5wdXQ6IHtcblx0XHRcdFx0cHJvcDoge1xuXHRcdFx0XHRcdG5hbWU6ICcnLFxuXHRcdFx0XHRcdHJlcXVpcm5tZW50czogW11cblx0XHRcdFx0fSxcblx0XHRcdFx0c3RhdGU6IHtcblx0XHRcdFx0XHRhZGRyZXNzZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRcdGZhaWx1cmU6IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNsYXNzZXM6IHtcblx0XHRcdCdmb3JtLWdyb3VwJzogZmFsc2UsXG5cdFx0XHQnaGFzLXN1Y2Nlc3MnOiBmYWxzZSxcblx0XHRcdCdoYXMtd2FybmluZyc6IGZhbHNlLFxuXHRcdFx0J2hhcy1kYW5nZXInOiBmYWxzZSxcblx0XHRcdCdmb3JtLWNvbnRyb2wtbGFiZWwnOiBmYWxzZSxcblx0XHRcdCdmb3JtLWNvbnRyb2wnOiBmYWxzZSxcblx0XHRcdCdmb3JtLWNvbnRyb2wtc3VjY2Vzcyc6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbC13YXJuaW5nJzogZmFsc2UsXG5cdFx0XHQnZm9ybS1jb250cm9sLWRhbmdlcic6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbC1mZWVkYmFjayc6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tdGV4dCc6IGZhbHNlLFxuXHRcdFx0J3RleHQtbXV0ZWQnOiBmYWxzZVxuXHRcdH0sXG5cdFx0c3R5bGVzOiB7XG5cblx0XHR9LFxuXHRcdGNoYW5nZVN0YXRlOiB7XG5cdFx0XHRpbnB1dFN1Y2Nlc3M6ICcnLFxuXHRcdFx0aW5wdXRGYWlsZWQ6ICcnXG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaW5wdXRTdWNjZXNzKCkge31cblx0ZnVuY3Rpb24gaW5wdXRGYWlsZWQoKSB7fVxuXG5cdHJldHVybiBzdGF0ZU9iamVjdDtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgndHJ1bXBzTnV0cycpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikgeyAgIFxuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgLy9kZWZpbmUgdGhlIGxhbmRpbmcgcGFnZVxuICAgIC53aGVuKCcvJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xhbmRpbmdQYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsYW5kaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9wcm9jZXNzaW5nJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3Byb2Nlc3NpbmcuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3Byb2Nlc3NpbmdDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24oKSB7IHJldHVybiAnYXdlc29tZSc7IH1cbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9jb25maXJtYXRpb24nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY29uZmlybWF0aW9uLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjb25maXJtYXRpb25Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSk7XG59XG5cblxuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5zZXJ2aWNlKCdzZXJ2ZXInLCBzZXJ2ZXIpO1xuXG5zZXJ2ZXIuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlcnZlcigkbG9nLCAkaHR0cCkge1xuXHR2YXIgYmFja2VuZCA9IHRoaXM7XG5cblx0Ly9nZXRzIGZyb20gdGhlIHNlcnZlclxuXHRiYWNrZW5kLl9nZXQgPSBmdW5jdGlvbih1cmwpIHtcblx0XHQvLyRsb2cuaW5mbygnZ2V0dGluZyBCYWNrZW5kJyk7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Ly8kbG9nLmluZm8ocmVzcG9uc2UpO1xuXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cblx0XHRcdH0sIGZ1bmN0aW9uIHRoZUVycm9ycyhlcnJvcikge1xuXG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdC8vcG9zdHMgdG8gdGhlIHNlcnZlclxuXHRiYWNrZW5kLl9wb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcblxuXHRcdCRsb2cuaW5mbygndXJsJywgdXJsLCAnZGF0YScsIGRhdGEpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdCRodHRwLnBvc3QodXJsLCBkYXRhLCBjb25maWcpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblxuXHRcdFx0fSwgZnVuY3Rpb24gdGhlRXJyb3JzKGVycm9yKSB7XG5cblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0Ly9nZXQgdGhlIHJlcXVpcmVkIHNxdWFyZSBpZFxuXHRiYWNrZW5kLmdldFNxckFwcElkID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8kbG9nLmluZm8oJ3NlbmRpbmcgZnJvbSBzcXInKTtcblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0YmFja2VuZC5fZ2V0KCcvYXBpL3NxdWFyZUlkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHQvLyRsb2cuaW5mbygnZ290IHRoaXMnLCByZXNwb25zZSk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0Ly9yZWNlaXZlcyBhIHppcGNvZGUsIHJldHVybnMgYSBjaXR5IGFuZCBzdGF0ZVxuXHRiYWNrZW5kLmNpdHlTdGF0ZUxvb2t1cCA9IGZ1bmN0aW9uKHppcGNvZGUpIHtcblxuXHRcdC8vYnVpbGQgdGhlIG5ldyB1cmxcblx0XHR2YXIgdXJsID0gJy9hcGkvemlwY2hlY2svJyArIHppcGNvZGU7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9pbml0aWF0ZSB0aGUgcmVxdWVzdFxuXHRcdFx0YmFja2VuZC5fZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0XHRcdC8vcmV0dXJuIGEgZ29vZCByZXNwb25zZVxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblxuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblxuXHRcdFx0XHQvL3JldHVybiBhbiBlcnJvciByZXNwb25zZVxuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGJhY2tlbmQuc3VibWl0U2FsZSA9IGZ1bmN0aW9uKG9yZGVyRm9ybSkge1xuXG5cdFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nIHNhbGUnKTtcblxuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIGNvbmZpZyA9IHtcblx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTg7J1xuXHRcdH07XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9pbml0aWF0ZSB0aGUgcmVxdWVzdFxuXHRcdFx0YmFja2VuZC5fcG9zdCgnL2FwaS9vcmRlcicsIG9yZGVyRm9ybSwgY29uZmlnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Ly9yZXR1cm4gYSBnb29kIHJlc3BvbnNlXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ3RydW1wc051dHMnKVxuICAgIC5zZXJ2aWNlKCdzdGF0ZURhdGEnLCBzdGF0ZURhdGEpO1xuXG5zdGF0ZURhdGEuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0YXRlRGF0YSgkbG9nKSB7XG5cdHZhciBzdGF0ZSA9IHRoaXM7XG5cblx0c3RhdGUudmFsU3RhZ2VzID0ge1xuICAgIFx0YXR0ZW1wdGVkOiBmYWxzZSxcbiAgICBcdHN1Y2Nlc3NmdWw6IGZhbHNlLFxuICAgIFx0ZmFpbGVkOiB0cnVlXG5cdH07XG5cblx0c3RhdGUuY2xhc3NlcyA9IHtcblx0XHRjb250YWluZXI6IHtcblx0XHRcdCdoYXMtc3VjY2Vzcyc6IGZhbHNlLFxuXHRcdFx0J2hhcy13YXJuaW5nJzogZmFsc2UsXG5cdFx0XHQnaGFzLWRhbmdlcic6IGZhbHNlLFx0XHRcdFxuXHRcdH0sXG5cdFx0aW5wdXQ6IHtcblx0XHRcdCdmb3JtLWNvbnRyb2wtc3VjY2Vzcyc6IGZhbHNlLFxuXHRcdFx0J2Zvcm0tY29udHJvbC13YXJuaW5nJzogZmFsc2UsXG5cdFx0XHQnZm9ybS1jb250cm9sLWRhbmdlcic6IGZhbHNlXG5cdFx0fVxuXHR9O1xuXG5cdHN0YXRlLnN0eWxlcyA9IHtcblx0XHRjb250YWluZXI6IHt9LFxuXHRcdGlucHV0OiB7fVxuXHR9O1xuXG5cdHN0YXRlLmluaXRWYWxTdGFnZXMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc3RhdGUudmFsU3RhZ2VzO1xuXHR9XG5cblx0c3RhdGUuaW5pdENsYXNzZXMgPSBmdW5jdGlvbihzZWN0aW9uKSB7XG5cdFx0cmV0dXJuIHN0YXRlLmNsYXNzZXNbc2VjdGlvbl07XG5cdH1cblxuXHRzdGF0ZS5pbml0U3R5bGVzID0gZnVuY3Rpb24oc2VjdGlvbikge1xuXHRcdHJldHVybiBzdGF0ZS5zdHlsZXNbc2VjdGlvbl07XG5cdH1cblxuXHRzdGF0ZS51cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uKHNlY3Rpb24sIHZhbHVlKSB7XG5cdFx0dmFyIHJldHVybk9iamVjdCA9IHN0YXRlLmNsYXNzZXNbc2VjdGlvbl07XG5cblx0XHRPYmplY3Qua2V5cyhyZXR1cm5PYmplY3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHR2YXIgcmVzdWx0QXJyYXkgPSBrZXkuc3BsaXQoJy0nKTtcblxuXHRcdFx0cmVzdWx0QXJyYXkuZm9yRWFjaChmdW5jdGlvbih3b3JkKSB7XG5cdFx0XHRcdGlmKHdvcmQgPT0gdmFsdWUpIHJldHVybk9iamVjdFtrZXldID0gdHJ1ZTtcblx0XHRcdFx0ZWxzZSByZXR1cm5PYmplY3Rba2V5XSA9IGZhbHNlO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vaWYoa2V5LmNvbnRhaW5zKHZhbHVlKSkgcmV0dXJuT2JqZWN0W2tleV0gPSB0cnVlO1xuXHRcdFx0Ly9lbHNlIHJldHVybk9iamVjdFtrZXldID0gZmFsc2U7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcmV0dXJuT2JqZWN0O1xuXHR9XG5cbn1cdCIsIi8vIE1PRFVMRVxudmFyIHRydW1wc051dHMgPSBhbmd1bGFyLm1vZHVsZSgndHJ1bXBzTnV0cycsIFsnbmdSb3V0ZSddKTtcblxuIl19
