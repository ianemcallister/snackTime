function confirmationController(t){}function landingController(t,e,r,n,o,i){function c(){i.getSqrAppId().then(function(t){s.model.apis.squareId=t.id})["catch"](function(t){})}var s=this;s.model=o,t.$watch("vm.model.shipping.address.zip",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.zip=t)}),t.$watch("vm.model.shipping.address.city",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.city=t)}),t.$watch("vm.model.shipping.address.state",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.state=t)}),t.$watch("vm.model.shipping.address.street1",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street1=t)}),t.$watch("vm.model.shipping.address.street2",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street2=t)}),t.$watch("vm.model.shipping.address.street3",function(t,e){s.model.copyShippingAddress&&(s.model.billing.address.street3=t)}),s.copyShippingAddress=function(t){t?s.model.billing.address=s.model.shipping.address:s.model.billing.address=o.billing.address},s.submitForm=function(t){e.info("submitting",t),i.submitSale(s.model).then(function(t){e.info(t),r.path("/confirmation/?tesing=goodTest"),n.$apply()})["catch"](function(t){e.info(t)}),r.path("/processing")},c()}function processingController(t,e){}function billingInfo(){function t(t,e,r,n){}function e(t,e){var r=this;r.toggleAddressCopy=function(t){r.copyShipping()(t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/billingInfo.directive.htm",replace:!0,scope:{address:"=",payment:"=",copyShippingAddress:"=",copyShipping:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccCSV(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccCSV.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccCapture(){function t(t,e,r,n){}function e(t,e,r){var n=this;n.data={card:{}},n.submitForm=function(){return e.info("submitting",n.data),n.isProcessing=!0,n.paymentForm.requestCardNonce(),!1},n.chargeCardWithNonce=function(t){e.info("charging card",n.data)};var o=function(){r.getSqrAppId().then(function(r){n.paymentForm=new SqPaymentForm({applicationId:r.id,inputClass:"sq-input",inputStyles:[{fontSize:"14px",padding:"7px 12px",backgroundColor:"transparent"}],cardNumber:{elementId:"sq-card-number",placeholder:"•••• •••• •••• ••••"},cvv:{elementId:"sq-cvv",placeholder:"CVV"},expirationDate:{elementId:"sq-expiration-date",placeholder:"MM/YY"},postalCode:{elementId:"sq-postal-code"},callbacks:{cardNonceResponseReceived:function(r,o,i){r?(e.info("Encountered errors:"),n.card_errors=r,n.isProcessing=!1,t.$apply()):(n.card_errors=[],alert("Nonce received: "+o),n.chargeCardWithNonce(o))},unsupportedBrowserDetected:function(){},inputEventReceived:function(t){switch(t.eventType){case"focusClassAdded":break;case"focusClassRemoved":break;case"errorClassAdded":break;case"errorClassRemoved":break;case"cardBrandChanged":break;case"postalCodeChanged":}},paymentFormLoaded:function(){}}}),n.paymentForm.build()})["catch"](function(t){e.info(t)})};o()}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccCapture.directive.htm",replace:!0,scope:{isProcessing:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","server"],r}function ccExp(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccExp.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccName.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function ccNumber(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/ccNumber.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function city(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/city.directive.htm",replace:!0,scope:{cityName:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function contactInfo(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/contactInfo.directive.htm",replace:!0,scope:{name:"=",email:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function emailAddress(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailAddress.directive.htm",replace:!0,scope:{email:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function firstName(){function t(t,e,r,n){}function e(t,e,r){var n=this;n.state={container:{classes:r.initClasses("container"),styles:r.initStyles("container")},input:{classes:r.initClasses("input"),styles:r.initStyles("container")}},n.validate=function(t,e){}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/firstName.directive.htm",replace:!0,scope:{first:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","stateData"],r}function lastName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/lastName.directive.htm",replace:!0,scope:{last:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function productSelection(){function t(t,e,r,n){}function e(t,e){var r=this;r.calculateSubtotal=function(){r.subtotal=r.qty*r.price},r.decrement=function(){r.qty>1&&(r.qty=r.qty-1),r.calculateSubtotal()},r.increment=function(){r.qty=r.qty+1,r.calculateSubtotal()}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/productSelection.directive.htm",replace:!0,scope:{qty:"=",price:"=",subtotal:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function progressBar(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/progressBar.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function purchaseBtn(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/purchaseBtn.directive.htm",replace:!0,scope:{submitForm:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function shippingCalculator(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shippingCalculator.directive.htm",replace:!0,scope:{serviceClass:"=",cost:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function shippingInfo(){function t(t,e,r,n){}function e(t,e,r){var n=this;n.calculateShipping=function(t){e.info("calculating the info now",t),r.postageCalculator(t,n.qty).then(function(t){n.requirnments.dataAquired=!0,e.info("got this back from postageCalculator",t,n.requirnments.dataAquired)})["catch"](function(t){e.info("got this error from the postageCalculator",t)})}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shippingInfo.directive.htm",replace:!0,scope:{address:"=",requirnments:"=",cost:"=",qty:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","server"],r}function state(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/state.directive.htm",replace:!0,scope:{stateId:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function street(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/street.directive.htm",replace:!0,scope:{streetAddress:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function toolBar(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function yourName(){function t(t,e,r,n){}function e(t,e){}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/yourName.directive.htm",replace:!0,scope:{name:"="},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log"],r}function zipCode(){function t(t,e,r,n){}function e(t,e,r,n,o){function i(t){var e=!1;return"undefined"!=typeof t&&t.length>=5&&(e=!0),e}function c(){a.state.container.classes=o.updateState("container","success"),a.state.input.classes=o.updateState("input","success")}function s(){a.state.container.classes["has-success"]=!1,a.state.container.classes["has-warning"]=!0,a.state.container.classes["has-danger"]=!1,a.state.input.classes["form-control-success"]=!1,a.state.input.classes["form-control-warning"]=!0,a.state.input.classes["form-control-danger"]=!1}function l(t){return new Promise(function(r,o){n.cityStateLookup(t).then(function(t){e.info("got this response",t),r(t)})["catch"](function(t){e.info("got this error",t),o(t)})})}var a=this;a.valStages=o.initValStages(),a.state={container:{classes:o.initClasses("container"),styles:o.initStyles("container")},input:{classes:o.initClasses("input"),styles:o.initStyles("container")}},a.validate=function(t){a.valStages.attempted&&(i(t)?(c(),l(t).then(function(t){a.cityName=t.zipCode.city,a.stateId=t.zipCode.state,r.$apply()})["catch"](function(t){e.info("there was an error")}),a.calculateShipping()({start:"97005",end:a.zip})):s())},a.submit=function(t){a.valStages.attempted=!0,a.validate(t)}}t.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/zipCode.directive.htm",replace:!0,scope:{uniqueId:"=",zip:"=",cityName:"=",stateId:"=",calculateShipping:"&"},link:t,controller:e,controllerAs:"vm",bindToController:!0};return e.$inject=["$scope","$log","$rootScope","server","stateData"],r}function dataModel(t){function e(t){}function r(t,e){}function n(t){}function o(t,e){}var i={name:{first:"",last:""},email:"",copyShippingAddress:!0,product:{price:2e3},order:{qty:1,cost:{subtotal:2e3,tax:0,discounts:{promotions:[],totalValue:0},total:0}},shipping:{address:{street1:"",street2:"",street3:"",city:"",state:"",zip:""},requirnments:{isPriority:"true",dataAquired:!1,priority:{transitDays:0,cost:{amount:0,currency:"USD"}},express:{transitDays:0,cost:{amount:0,currency:"USD"}}},cost:{amount:645,currency:"USD"}},billing:{address:{street1:"",street2:"",street3:"",city:"",state:"",zip:""},payment:{number:["","","",""],exp:["",""],csv:""}},apis:{squareId:""},_read:e,_update:r,readProp:n,updateProp:o};return i}function stateFactory(t){var e={model:{allElementsCompleted:!1,fields:[],input:{prop:{name:"",requirnments:[]},state:{addressed:!1,success:!1,failure:!1}}},classes:{"form-group":!1,"has-success":!1,"has-warning":!1,"has-danger":!1,"form-control-label":!1,"form-control":!1,"form-control-success":!1,"form-control-warning":!1,"form-control-danger":!1,"form-control-feedback":!1,"form-text":!1,"text-muted":!1},styles:{},changeState:{inputSuccess:"",inputFailed:""}};return e}function config(t){t.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/processing",{templateUrl:"views/processing.htm",controller:"processingController",controllerAs:"vm"}).when("/confirmation",{templateUrl:"views/confirmation.htm",controller:"confirmationController",controllerAs:"vm"})}function getAuthId(t){return new Promise(function(e,r){t.getSqrAppId().then(function(t){e(t.id)})["catch"](function(t){r(t)})})}function server(t,e){var r=this;r._get=function(t){return new Promise(function(r,n){e.get(t).then(function(t){r(t.data)},function(t){n(t)})})},r._post=function(r,n,o){return t.info("url",r,"data",n),new Promise(function(t,i){e.post(r,n,o).then(function(e){t(e)},function(t){i(t)})})},r.getSqrAppId=function(){return new Promise(function(t,e){r._get("/api/squareId").then(function(e){t(e)})["catch"](function(t){e(t)})})},r.cityStateLookup=function(t){var e="/api/zipcheck/"+t;return new Promise(function(t,n){r._get(e).then(function(e){t(e)})["catch"](function(t){n(t)})})},r.postageCalculator=function(e,n){t.info("got these data points. zipPoints:",e,"qty",n);var o="/api/calcPostage/"+e.start+"/"+e.end+"/"+n;return new Promise(function(e,n){r._get(o).then(function(r){t.info("got this response",r),e(r)})["catch"](function(t){n(t)})})},r.submitSale=function(e){t.info("submitting sale");var n={"Content-Type":"application/x-www-form-urlencoded;charset=utf-8;"};return new Promise(function(t,o){r._post("/api/order",e,n).then(function(e){t(e)})["catch"](function(t){o(t)})})}}function stateData(t){var e=this;e.valStages={attempted:!1,successful:!1,failed:!0},e.classes={container:{"has-success":!1,"has-warning":!1,"has-danger":!1},input:{"form-control-success":!1,"form-control-warning":!1,"form-control-danger":!1}},e.styles={container:{},input:{}},e.initValStages=function(){return e.valStages},e.initClasses=function(t){return e.classes[t]},e.initStyles=function(t){return e.styles[t]},e.updateState=function(t,r){var n=e.classes[t];return Object.keys(n).forEach(function(t){var e=t.split("-");e.forEach(function(e){e==r?n[t]=!0:n[t]=!1})}),n}}config.$inject=["$routeProvider"];var trumpsNuts=angular.module("trumpsNuts",["ngRoute"]);angular.module("trumpsNuts").controller("confirmationController",confirmationController),confirmationController.$inject=["$log"],angular.module("trumpsNuts").controller("landingController",landingController),landingController.$inject=["$scope","$log","$location","$rootScope","dataModel","server"],angular.module("trumpsNuts").controller("processingController",processingController),processingController.$inject=["$log","test"],angular.module("trumpsNuts").directive("billingInfo",billingInfo),angular.module("trumpsNuts").directive("ccCSV",ccCSV),angular.module("trumpsNuts").directive("ccCapture",ccCapture),angular.module("trumpsNuts").directive("ccExp",ccExp),angular.module("trumpsNuts").directive("ccName",ccName),angular.module("trumpsNuts").directive("ccNumber",ccNumber),angular.module("trumpsNuts").directive("city",city),angular.module("trumpsNuts").directive("contactInfo",contactInfo),angular.module("trumpsNuts").directive("emailAddress",emailAddress),angular.module("trumpsNuts").directive("firstName",firstName),angular.module("trumpsNuts").directive("lastName",lastName),angular.module("trumpsNuts").directive("productSelection",productSelection),angular.module("trumpsNuts").directive("progressBar",progressBar),angular.module("trumpsNuts").directive("purchaseBtn",purchaseBtn),angular.module("trumpsNuts").directive("shippingCalculator",shippingCalculator),angular.module("trumpsNuts").directive("shippingInfo",shippingInfo),angular.module("trumpsNuts").directive("state",state),angular.module("trumpsNuts").directive("street",street),angular.module("trumpsNuts").directive("toolBar",toolBar),angular.module("trumpsNuts").directive("yourName",yourName),angular.module("trumpsNuts").directive("zipCode",zipCode),angular.module("trumpsNuts").factory("dataModel",dataModel),dataModel.$inject=["$log"],angular.module("trumpsNuts").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("trumpsNuts").config(config),angular.module("trumpsNuts").service("server",server),server.$inject=["$log","$http"],angular.module("trumpsNuts").service("stateData",stateData),stateData.$inject=["$log"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
